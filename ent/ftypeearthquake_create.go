// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/hedwig-phan/assignment-3/ent/earthquake"
	"gitlab.com/hedwig-phan/assignment-3/ent/featuretype"
	"gitlab.com/hedwig-phan/assignment-3/ent/ftypeearthquake"
)

// FtypeEarthquakeCreate is the builder for creating a FtypeEarthquake entity.
type FtypeEarthquakeCreate struct {
	config
	mutation *FtypeEarthquakeMutation
	hooks    []Hook
}

// SetFtID sets the "ft_id" field.
func (fec *FtypeEarthquakeCreate) SetFtID(i int) *FtypeEarthquakeCreate {
	fec.mutation.SetFtID(i)
	return fec
}

// SetNillableFtID sets the "ft_id" field if the given value is not nil.
func (fec *FtypeEarthquakeCreate) SetNillableFtID(i *int) *FtypeEarthquakeCreate {
	if i != nil {
		fec.SetFtID(*i)
	}
	return fec
}

// SetEqID sets the "eq_id" field.
func (fec *FtypeEarthquakeCreate) SetEqID(i int) *FtypeEarthquakeCreate {
	fec.mutation.SetEqID(i)
	return fec
}

// SetNillableEqID sets the "eq_id" field if the given value is not nil.
func (fec *FtypeEarthquakeCreate) SetNillableEqID(i *int) *FtypeEarthquakeCreate {
	if i != nil {
		fec.SetEqID(*i)
	}
	return fec
}

// SetCreatedAt sets the "created_at" field.
func (fec *FtypeEarthquakeCreate) SetCreatedAt(t time.Time) *FtypeEarthquakeCreate {
	fec.mutation.SetCreatedAt(t)
	return fec
}

// SetUpdatedAt sets the "updated_at" field.
func (fec *FtypeEarthquakeCreate) SetUpdatedAt(t time.Time) *FtypeEarthquakeCreate {
	fec.mutation.SetUpdatedAt(t)
	return fec
}

// SetDeletedAt sets the "deleted_at" field.
func (fec *FtypeEarthquakeCreate) SetDeletedAt(t time.Time) *FtypeEarthquakeCreate {
	fec.mutation.SetDeletedAt(t)
	return fec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fec *FtypeEarthquakeCreate) SetNillableDeletedAt(t *time.Time) *FtypeEarthquakeCreate {
	if t != nil {
		fec.SetDeletedAt(*t)
	}
	return fec
}

// SetID sets the "id" field.
func (fec *FtypeEarthquakeCreate) SetID(i int) *FtypeEarthquakeCreate {
	fec.mutation.SetID(i)
	return fec
}

// SetEarthquakeID sets the "earthquake" edge to the Earthquake entity by ID.
func (fec *FtypeEarthquakeCreate) SetEarthquakeID(id int) *FtypeEarthquakeCreate {
	fec.mutation.SetEarthquakeID(id)
	return fec
}

// SetNillableEarthquakeID sets the "earthquake" edge to the Earthquake entity by ID if the given value is not nil.
func (fec *FtypeEarthquakeCreate) SetNillableEarthquakeID(id *int) *FtypeEarthquakeCreate {
	if id != nil {
		fec = fec.SetEarthquakeID(*id)
	}
	return fec
}

// SetEarthquake sets the "earthquake" edge to the Earthquake entity.
func (fec *FtypeEarthquakeCreate) SetEarthquake(e *Earthquake) *FtypeEarthquakeCreate {
	return fec.SetEarthquakeID(e.ID)
}

// SetFeatureTypeID sets the "feature_type" edge to the FeatureType entity by ID.
func (fec *FtypeEarthquakeCreate) SetFeatureTypeID(id int) *FtypeEarthquakeCreate {
	fec.mutation.SetFeatureTypeID(id)
	return fec
}

// SetNillableFeatureTypeID sets the "feature_type" edge to the FeatureType entity by ID if the given value is not nil.
func (fec *FtypeEarthquakeCreate) SetNillableFeatureTypeID(id *int) *FtypeEarthquakeCreate {
	if id != nil {
		fec = fec.SetFeatureTypeID(*id)
	}
	return fec
}

// SetFeatureType sets the "feature_type" edge to the FeatureType entity.
func (fec *FtypeEarthquakeCreate) SetFeatureType(f *FeatureType) *FtypeEarthquakeCreate {
	return fec.SetFeatureTypeID(f.ID)
}

// Mutation returns the FtypeEarthquakeMutation object of the builder.
func (fec *FtypeEarthquakeCreate) Mutation() *FtypeEarthquakeMutation {
	return fec.mutation
}

// Save creates the FtypeEarthquake in the database.
func (fec *FtypeEarthquakeCreate) Save(ctx context.Context) (*FtypeEarthquake, error) {
	return withHooks(ctx, fec.sqlSave, fec.mutation, fec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fec *FtypeEarthquakeCreate) SaveX(ctx context.Context) *FtypeEarthquake {
	v, err := fec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fec *FtypeEarthquakeCreate) Exec(ctx context.Context) error {
	_, err := fec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fec *FtypeEarthquakeCreate) ExecX(ctx context.Context) {
	if err := fec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fec *FtypeEarthquakeCreate) check() error {
	if _, ok := fec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FtypeEarthquake.created_at"`)}
	}
	if _, ok := fec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FtypeEarthquake.updated_at"`)}
	}
	return nil
}

func (fec *FtypeEarthquakeCreate) sqlSave(ctx context.Context) (*FtypeEarthquake, error) {
	if err := fec.check(); err != nil {
		return nil, err
	}
	_node, _spec := fec.createSpec()
	if err := sqlgraph.CreateNode(ctx, fec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	fec.mutation.id = &_node.ID
	fec.mutation.done = true
	return _node, nil
}

func (fec *FtypeEarthquakeCreate) createSpec() (*FtypeEarthquake, *sqlgraph.CreateSpec) {
	var (
		_node = &FtypeEarthquake{config: fec.config}
		_spec = sqlgraph.NewCreateSpec(ftypeearthquake.Table, sqlgraph.NewFieldSpec(ftypeearthquake.FieldID, field.TypeInt))
	)
	if id, ok := fec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fec.mutation.CreatedAt(); ok {
		_spec.SetField(ftypeearthquake.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fec.mutation.UpdatedAt(); ok {
		_spec.SetField(ftypeearthquake.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fec.mutation.DeletedAt(); ok {
		_spec.SetField(ftypeearthquake.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := fec.mutation.EarthquakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ftypeearthquake.EarthquakeTable,
			Columns: []string{ftypeearthquake.EarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EqID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fec.mutation.FeatureTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ftypeearthquake.FeatureTypeTable,
			Columns: []string{ftypeearthquake.FeatureTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuretype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FtID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FtypeEarthquakeCreateBulk is the builder for creating many FtypeEarthquake entities in bulk.
type FtypeEarthquakeCreateBulk struct {
	config
	err      error
	builders []*FtypeEarthquakeCreate
}

// Save creates the FtypeEarthquake entities in the database.
func (fecb *FtypeEarthquakeCreateBulk) Save(ctx context.Context) ([]*FtypeEarthquake, error) {
	if fecb.err != nil {
		return nil, fecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fecb.builders))
	nodes := make([]*FtypeEarthquake, len(fecb.builders))
	mutators := make([]Mutator, len(fecb.builders))
	for i := range fecb.builders {
		func(i int, root context.Context) {
			builder := fecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FtypeEarthquakeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fecb *FtypeEarthquakeCreateBulk) SaveX(ctx context.Context) []*FtypeEarthquake {
	v, err := fecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fecb *FtypeEarthquakeCreateBulk) Exec(ctx context.Context) error {
	_, err := fecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fecb *FtypeEarthquakeCreateBulk) ExecX(ctx context.Context) {
	if err := fecb.Exec(ctx); err != nil {
		panic(err)
	}
}
