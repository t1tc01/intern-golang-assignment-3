// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/hedwig-phan/assignment-3/ent/credentials"
	"gitlab.com/hedwig-phan/assignment-3/ent/predicate"
	"gitlab.com/hedwig-phan/assignment-3/ent/user"
)

// CredentialsUpdate is the builder for updating Credentials entities.
type CredentialsUpdate struct {
	config
	hooks    []Hook
	mutation *CredentialsMutation
}

// Where appends a list predicates to the CredentialsUpdate builder.
func (cu *CredentialsUpdate) Where(ps ...predicate.Credentials) *CredentialsUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CredentialsUpdate) SetUserID(i int) *CredentialsUpdate {
	cu.mutation.SetUserID(i)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CredentialsUpdate) SetNillableUserID(i *int) *CredentialsUpdate {
	if i != nil {
		cu.SetUserID(*i)
	}
	return cu
}

// ClearUserID clears the value of the "user_id" field.
func (cu *CredentialsUpdate) ClearUserID() *CredentialsUpdate {
	cu.mutation.ClearUserID()
	return cu
}

// SetHashedPassword sets the "hashed_password" field.
func (cu *CredentialsUpdate) SetHashedPassword(s string) *CredentialsUpdate {
	cu.mutation.SetHashedPassword(s)
	return cu
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (cu *CredentialsUpdate) SetNillableHashedPassword(s *string) *CredentialsUpdate {
	if s != nil {
		cu.SetHashedPassword(*s)
	}
	return cu
}

// SetLastLogin sets the "last_login" field.
func (cu *CredentialsUpdate) SetLastLogin(t time.Time) *CredentialsUpdate {
	cu.mutation.SetLastLogin(t)
	return cu
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (cu *CredentialsUpdate) SetNillableLastLogin(t *time.Time) *CredentialsUpdate {
	if t != nil {
		cu.SetLastLogin(*t)
	}
	return cu
}

// SetUser sets the "user" edge to the User entity.
func (cu *CredentialsUpdate) SetUser(u *User) *CredentialsUpdate {
	return cu.SetUserID(u.ID)
}

// Mutation returns the CredentialsMutation object of the builder.
func (cu *CredentialsUpdate) Mutation() *CredentialsMutation {
	return cu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cu *CredentialsUpdate) ClearUser() *CredentialsUpdate {
	cu.mutation.ClearUser()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CredentialsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CredentialsUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CredentialsUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CredentialsUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CredentialsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(credentials.Table, credentials.Columns, sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.HashedPassword(); ok {
		_spec.SetField(credentials.FieldHashedPassword, field.TypeString, value)
	}
	if value, ok := cu.mutation.LastLogin(); ok {
		_spec.SetField(credentials.FieldLastLogin, field.TypeTime, value)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credentials.UserTable,
			Columns: []string{credentials.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credentials.UserTable,
			Columns: []string{credentials.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{credentials.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CredentialsUpdateOne is the builder for updating a single Credentials entity.
type CredentialsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CredentialsMutation
}

// SetUserID sets the "user_id" field.
func (cuo *CredentialsUpdateOne) SetUserID(i int) *CredentialsUpdateOne {
	cuo.mutation.SetUserID(i)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CredentialsUpdateOne) SetNillableUserID(i *int) *CredentialsUpdateOne {
	if i != nil {
		cuo.SetUserID(*i)
	}
	return cuo
}

// ClearUserID clears the value of the "user_id" field.
func (cuo *CredentialsUpdateOne) ClearUserID() *CredentialsUpdateOne {
	cuo.mutation.ClearUserID()
	return cuo
}

// SetHashedPassword sets the "hashed_password" field.
func (cuo *CredentialsUpdateOne) SetHashedPassword(s string) *CredentialsUpdateOne {
	cuo.mutation.SetHashedPassword(s)
	return cuo
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (cuo *CredentialsUpdateOne) SetNillableHashedPassword(s *string) *CredentialsUpdateOne {
	if s != nil {
		cuo.SetHashedPassword(*s)
	}
	return cuo
}

// SetLastLogin sets the "last_login" field.
func (cuo *CredentialsUpdateOne) SetLastLogin(t time.Time) *CredentialsUpdateOne {
	cuo.mutation.SetLastLogin(t)
	return cuo
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (cuo *CredentialsUpdateOne) SetNillableLastLogin(t *time.Time) *CredentialsUpdateOne {
	if t != nil {
		cuo.SetLastLogin(*t)
	}
	return cuo
}

// SetUser sets the "user" edge to the User entity.
func (cuo *CredentialsUpdateOne) SetUser(u *User) *CredentialsUpdateOne {
	return cuo.SetUserID(u.ID)
}

// Mutation returns the CredentialsMutation object of the builder.
func (cuo *CredentialsUpdateOne) Mutation() *CredentialsMutation {
	return cuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *CredentialsUpdateOne) ClearUser() *CredentialsUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// Where appends a list predicates to the CredentialsUpdate builder.
func (cuo *CredentialsUpdateOne) Where(ps ...predicate.Credentials) *CredentialsUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CredentialsUpdateOne) Select(field string, fields ...string) *CredentialsUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Credentials entity.
func (cuo *CredentialsUpdateOne) Save(ctx context.Context) (*Credentials, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CredentialsUpdateOne) SaveX(ctx context.Context) *Credentials {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CredentialsUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CredentialsUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CredentialsUpdateOne) sqlSave(ctx context.Context) (_node *Credentials, err error) {
	_spec := sqlgraph.NewUpdateSpec(credentials.Table, credentials.Columns, sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Credentials.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, credentials.FieldID)
		for _, f := range fields {
			if !credentials.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != credentials.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.HashedPassword(); ok {
		_spec.SetField(credentials.FieldHashedPassword, field.TypeString, value)
	}
	if value, ok := cuo.mutation.LastLogin(); ok {
		_spec.SetField(credentials.FieldLastLogin, field.TypeTime, value)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credentials.UserTable,
			Columns: []string{credentials.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credentials.UserTable,
			Columns: []string{credentials.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Credentials{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{credentials.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
