// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/hedwig-phan/assignment-3/ent/passwordresetrequest"
	"gitlab.com/hedwig-phan/assignment-3/ent/user"
)

// PasswordResetRequestCreate is the builder for creating a PasswordResetRequest entity.
type PasswordResetRequestCreate struct {
	config
	mutation *PasswordResetRequestMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (prrc *PasswordResetRequestCreate) SetUserID(i int) *PasswordResetRequestCreate {
	prrc.mutation.SetUserID(i)
	return prrc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (prrc *PasswordResetRequestCreate) SetNillableUserID(i *int) *PasswordResetRequestCreate {
	if i != nil {
		prrc.SetUserID(*i)
	}
	return prrc
}

// SetTokenValue sets the "token_value" field.
func (prrc *PasswordResetRequestCreate) SetTokenValue(s string) *PasswordResetRequestCreate {
	prrc.mutation.SetTokenValue(s)
	return prrc
}

// SetExpirationTime sets the "expiration_time" field.
func (prrc *PasswordResetRequestCreate) SetExpirationTime(t time.Time) *PasswordResetRequestCreate {
	prrc.mutation.SetExpirationTime(t)
	return prrc
}

// SetUser sets the "user" edge to the User entity.
func (prrc *PasswordResetRequestCreate) SetUser(u *User) *PasswordResetRequestCreate {
	return prrc.SetUserID(u.ID)
}

// Mutation returns the PasswordResetRequestMutation object of the builder.
func (prrc *PasswordResetRequestCreate) Mutation() *PasswordResetRequestMutation {
	return prrc.mutation
}

// Save creates the PasswordResetRequest in the database.
func (prrc *PasswordResetRequestCreate) Save(ctx context.Context) (*PasswordResetRequest, error) {
	return withHooks(ctx, prrc.sqlSave, prrc.mutation, prrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prrc *PasswordResetRequestCreate) SaveX(ctx context.Context) *PasswordResetRequest {
	v, err := prrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prrc *PasswordResetRequestCreate) Exec(ctx context.Context) error {
	_, err := prrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prrc *PasswordResetRequestCreate) ExecX(ctx context.Context) {
	if err := prrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prrc *PasswordResetRequestCreate) check() error {
	if _, ok := prrc.mutation.TokenValue(); !ok {
		return &ValidationError{Name: "token_value", err: errors.New(`ent: missing required field "PasswordResetRequest.token_value"`)}
	}
	if _, ok := prrc.mutation.ExpirationTime(); !ok {
		return &ValidationError{Name: "expiration_time", err: errors.New(`ent: missing required field "PasswordResetRequest.expiration_time"`)}
	}
	return nil
}

func (prrc *PasswordResetRequestCreate) sqlSave(ctx context.Context) (*PasswordResetRequest, error) {
	if err := prrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	prrc.mutation.id = &_node.ID
	prrc.mutation.done = true
	return _node, nil
}

func (prrc *PasswordResetRequestCreate) createSpec() (*PasswordResetRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &PasswordResetRequest{config: prrc.config}
		_spec = sqlgraph.NewCreateSpec(passwordresetrequest.Table, sqlgraph.NewFieldSpec(passwordresetrequest.FieldID, field.TypeInt))
	)
	if value, ok := prrc.mutation.TokenValue(); ok {
		_spec.SetField(passwordresetrequest.FieldTokenValue, field.TypeString, value)
		_node.TokenValue = value
	}
	if value, ok := prrc.mutation.ExpirationTime(); ok {
		_spec.SetField(passwordresetrequest.FieldExpirationTime, field.TypeTime, value)
		_node.ExpirationTime = value
	}
	if nodes := prrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordresetrequest.UserTable,
			Columns: []string{passwordresetrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PasswordResetRequestCreateBulk is the builder for creating many PasswordResetRequest entities in bulk.
type PasswordResetRequestCreateBulk struct {
	config
	err      error
	builders []*PasswordResetRequestCreate
}

// Save creates the PasswordResetRequest entities in the database.
func (prrcb *PasswordResetRequestCreateBulk) Save(ctx context.Context) ([]*PasswordResetRequest, error) {
	if prrcb.err != nil {
		return nil, prrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prrcb.builders))
	nodes := make([]*PasswordResetRequest, len(prrcb.builders))
	mutators := make([]Mutator, len(prrcb.builders))
	for i := range prrcb.builders {
		func(i int, root context.Context) {
			builder := prrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PasswordResetRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prrcb *PasswordResetRequestCreateBulk) SaveX(ctx context.Context) []*PasswordResetRequest {
	v, err := prrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prrcb *PasswordResetRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := prrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prrcb *PasswordResetRequestCreateBulk) ExecX(ctx context.Context) {
	if err := prrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
