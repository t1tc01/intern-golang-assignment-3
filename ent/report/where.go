// Code generated by ent, DO NOT EDIT.

package report

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.com/hedwig-phan/assignment-3/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldID, id))
}

// Felt applies equality check predicate on the "felt" field. It's identical to FeltEQ.
func Felt(v int32) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldFelt, v))
}

// Cdi applies equality check predicate on the "cdi" field. It's identical to CdiEQ.
func Cdi(v float64) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldCdi, v))
}

// Mmi applies equality check predicate on the "mmi" field. It's identical to MmiEQ.
func Mmi(v float64) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldMmi, v))
}

// Alert applies equality check predicate on the "alert" field. It's identical to AlertEQ.
func Alert(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldAlert, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldDeletedAt, v))
}

// FeltEQ applies the EQ predicate on the "felt" field.
func FeltEQ(v int32) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldFelt, v))
}

// FeltNEQ applies the NEQ predicate on the "felt" field.
func FeltNEQ(v int32) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldFelt, v))
}

// FeltIn applies the In predicate on the "felt" field.
func FeltIn(vs ...int32) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldFelt, vs...))
}

// FeltNotIn applies the NotIn predicate on the "felt" field.
func FeltNotIn(vs ...int32) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldFelt, vs...))
}

// FeltGT applies the GT predicate on the "felt" field.
func FeltGT(v int32) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldFelt, v))
}

// FeltGTE applies the GTE predicate on the "felt" field.
func FeltGTE(v int32) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldFelt, v))
}

// FeltLT applies the LT predicate on the "felt" field.
func FeltLT(v int32) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldFelt, v))
}

// FeltLTE applies the LTE predicate on the "felt" field.
func FeltLTE(v int32) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldFelt, v))
}

// FeltIsNil applies the IsNil predicate on the "felt" field.
func FeltIsNil() predicate.Report {
	return predicate.Report(sql.FieldIsNull(FieldFelt))
}

// FeltNotNil applies the NotNil predicate on the "felt" field.
func FeltNotNil() predicate.Report {
	return predicate.Report(sql.FieldNotNull(FieldFelt))
}

// CdiEQ applies the EQ predicate on the "cdi" field.
func CdiEQ(v float64) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldCdi, v))
}

// CdiNEQ applies the NEQ predicate on the "cdi" field.
func CdiNEQ(v float64) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldCdi, v))
}

// CdiIn applies the In predicate on the "cdi" field.
func CdiIn(vs ...float64) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldCdi, vs...))
}

// CdiNotIn applies the NotIn predicate on the "cdi" field.
func CdiNotIn(vs ...float64) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldCdi, vs...))
}

// CdiGT applies the GT predicate on the "cdi" field.
func CdiGT(v float64) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldCdi, v))
}

// CdiGTE applies the GTE predicate on the "cdi" field.
func CdiGTE(v float64) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldCdi, v))
}

// CdiLT applies the LT predicate on the "cdi" field.
func CdiLT(v float64) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldCdi, v))
}

// CdiLTE applies the LTE predicate on the "cdi" field.
func CdiLTE(v float64) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldCdi, v))
}

// CdiIsNil applies the IsNil predicate on the "cdi" field.
func CdiIsNil() predicate.Report {
	return predicate.Report(sql.FieldIsNull(FieldCdi))
}

// CdiNotNil applies the NotNil predicate on the "cdi" field.
func CdiNotNil() predicate.Report {
	return predicate.Report(sql.FieldNotNull(FieldCdi))
}

// MmiEQ applies the EQ predicate on the "mmi" field.
func MmiEQ(v float64) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldMmi, v))
}

// MmiNEQ applies the NEQ predicate on the "mmi" field.
func MmiNEQ(v float64) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldMmi, v))
}

// MmiIn applies the In predicate on the "mmi" field.
func MmiIn(vs ...float64) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldMmi, vs...))
}

// MmiNotIn applies the NotIn predicate on the "mmi" field.
func MmiNotIn(vs ...float64) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldMmi, vs...))
}

// MmiGT applies the GT predicate on the "mmi" field.
func MmiGT(v float64) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldMmi, v))
}

// MmiGTE applies the GTE predicate on the "mmi" field.
func MmiGTE(v float64) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldMmi, v))
}

// MmiLT applies the LT predicate on the "mmi" field.
func MmiLT(v float64) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldMmi, v))
}

// MmiLTE applies the LTE predicate on the "mmi" field.
func MmiLTE(v float64) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldMmi, v))
}

// MmiIsNil applies the IsNil predicate on the "mmi" field.
func MmiIsNil() predicate.Report {
	return predicate.Report(sql.FieldIsNull(FieldMmi))
}

// MmiNotNil applies the NotNil predicate on the "mmi" field.
func MmiNotNil() predicate.Report {
	return predicate.Report(sql.FieldNotNull(FieldMmi))
}

// AlertEQ applies the EQ predicate on the "alert" field.
func AlertEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldAlert, v))
}

// AlertNEQ applies the NEQ predicate on the "alert" field.
func AlertNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldAlert, v))
}

// AlertIn applies the In predicate on the "alert" field.
func AlertIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldAlert, vs...))
}

// AlertNotIn applies the NotIn predicate on the "alert" field.
func AlertNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldAlert, vs...))
}

// AlertGT applies the GT predicate on the "alert" field.
func AlertGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldAlert, v))
}

// AlertGTE applies the GTE predicate on the "alert" field.
func AlertGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldAlert, v))
}

// AlertLT applies the LT predicate on the "alert" field.
func AlertLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldAlert, v))
}

// AlertLTE applies the LTE predicate on the "alert" field.
func AlertLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldAlert, v))
}

// AlertContains applies the Contains predicate on the "alert" field.
func AlertContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldAlert, v))
}

// AlertHasPrefix applies the HasPrefix predicate on the "alert" field.
func AlertHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldAlert, v))
}

// AlertHasSuffix applies the HasSuffix predicate on the "alert" field.
func AlertHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldAlert, v))
}

// AlertIsNil applies the IsNil predicate on the "alert" field.
func AlertIsNil() predicate.Report {
	return predicate.Report(sql.FieldIsNull(FieldAlert))
}

// AlertNotNil applies the NotNil predicate on the "alert" field.
func AlertNotNil() predicate.Report {
	return predicate.Report(sql.FieldNotNull(FieldAlert))
}

// AlertEqualFold applies the EqualFold predicate on the "alert" field.
func AlertEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldAlert, v))
}

// AlertContainsFold applies the ContainsFold predicate on the "alert" field.
func AlertContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldAlert, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Report {
	return predicate.Report(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Report {
	return predicate.Report(sql.FieldNotNull(FieldDeletedAt))
}

// HasEarthquakes applies the HasEdge predicate on the "earthquakes" edge.
func HasEarthquakes() predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EarthquakesTable, EarthquakesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEarthquakesWith applies the HasEdge predicate on the "earthquakes" edge with a given conditions (other predicates).
func HasEarthquakesWith(preds ...predicate.Earthquake) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		step := newEarthquakesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Report) predicate.Report {
	return predicate.Report(sql.NotPredicates(p))
}
