// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/hedwig-phan/assignment-3/ent/passwordresetrequest"
	"gitlab.com/hedwig-phan/assignment-3/ent/predicate"
	"gitlab.com/hedwig-phan/assignment-3/ent/user"
)

// PasswordResetRequestUpdate is the builder for updating PasswordResetRequest entities.
type PasswordResetRequestUpdate struct {
	config
	hooks    []Hook
	mutation *PasswordResetRequestMutation
}

// Where appends a list predicates to the PasswordResetRequestUpdate builder.
func (prru *PasswordResetRequestUpdate) Where(ps ...predicate.PasswordResetRequest) *PasswordResetRequestUpdate {
	prru.mutation.Where(ps...)
	return prru
}

// SetUserID sets the "user_id" field.
func (prru *PasswordResetRequestUpdate) SetUserID(i int) *PasswordResetRequestUpdate {
	prru.mutation.SetUserID(i)
	return prru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (prru *PasswordResetRequestUpdate) SetNillableUserID(i *int) *PasswordResetRequestUpdate {
	if i != nil {
		prru.SetUserID(*i)
	}
	return prru
}

// ClearUserID clears the value of the "user_id" field.
func (prru *PasswordResetRequestUpdate) ClearUserID() *PasswordResetRequestUpdate {
	prru.mutation.ClearUserID()
	return prru
}

// SetTokenValue sets the "token_value" field.
func (prru *PasswordResetRequestUpdate) SetTokenValue(s string) *PasswordResetRequestUpdate {
	prru.mutation.SetTokenValue(s)
	return prru
}

// SetNillableTokenValue sets the "token_value" field if the given value is not nil.
func (prru *PasswordResetRequestUpdate) SetNillableTokenValue(s *string) *PasswordResetRequestUpdate {
	if s != nil {
		prru.SetTokenValue(*s)
	}
	return prru
}

// SetExpirationTime sets the "expiration_time" field.
func (prru *PasswordResetRequestUpdate) SetExpirationTime(t time.Time) *PasswordResetRequestUpdate {
	prru.mutation.SetExpirationTime(t)
	return prru
}

// SetNillableExpirationTime sets the "expiration_time" field if the given value is not nil.
func (prru *PasswordResetRequestUpdate) SetNillableExpirationTime(t *time.Time) *PasswordResetRequestUpdate {
	if t != nil {
		prru.SetExpirationTime(*t)
	}
	return prru
}

// SetUser sets the "user" edge to the User entity.
func (prru *PasswordResetRequestUpdate) SetUser(u *User) *PasswordResetRequestUpdate {
	return prru.SetUserID(u.ID)
}

// Mutation returns the PasswordResetRequestMutation object of the builder.
func (prru *PasswordResetRequestUpdate) Mutation() *PasswordResetRequestMutation {
	return prru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (prru *PasswordResetRequestUpdate) ClearUser() *PasswordResetRequestUpdate {
	prru.mutation.ClearUser()
	return prru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (prru *PasswordResetRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, prru.sqlSave, prru.mutation, prru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (prru *PasswordResetRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := prru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (prru *PasswordResetRequestUpdate) Exec(ctx context.Context) error {
	_, err := prru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prru *PasswordResetRequestUpdate) ExecX(ctx context.Context) {
	if err := prru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (prru *PasswordResetRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(passwordresetrequest.Table, passwordresetrequest.Columns, sqlgraph.NewFieldSpec(passwordresetrequest.FieldID, field.TypeInt))
	if ps := prru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prru.mutation.TokenValue(); ok {
		_spec.SetField(passwordresetrequest.FieldTokenValue, field.TypeString, value)
	}
	if value, ok := prru.mutation.ExpirationTime(); ok {
		_spec.SetField(passwordresetrequest.FieldExpirationTime, field.TypeTime, value)
	}
	if prru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordresetrequest.UserTable,
			Columns: []string{passwordresetrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordresetrequest.UserTable,
			Columns: []string{passwordresetrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, prru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passwordresetrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	prru.mutation.done = true
	return n, nil
}

// PasswordResetRequestUpdateOne is the builder for updating a single PasswordResetRequest entity.
type PasswordResetRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PasswordResetRequestMutation
}

// SetUserID sets the "user_id" field.
func (prruo *PasswordResetRequestUpdateOne) SetUserID(i int) *PasswordResetRequestUpdateOne {
	prruo.mutation.SetUserID(i)
	return prruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (prruo *PasswordResetRequestUpdateOne) SetNillableUserID(i *int) *PasswordResetRequestUpdateOne {
	if i != nil {
		prruo.SetUserID(*i)
	}
	return prruo
}

// ClearUserID clears the value of the "user_id" field.
func (prruo *PasswordResetRequestUpdateOne) ClearUserID() *PasswordResetRequestUpdateOne {
	prruo.mutation.ClearUserID()
	return prruo
}

// SetTokenValue sets the "token_value" field.
func (prruo *PasswordResetRequestUpdateOne) SetTokenValue(s string) *PasswordResetRequestUpdateOne {
	prruo.mutation.SetTokenValue(s)
	return prruo
}

// SetNillableTokenValue sets the "token_value" field if the given value is not nil.
func (prruo *PasswordResetRequestUpdateOne) SetNillableTokenValue(s *string) *PasswordResetRequestUpdateOne {
	if s != nil {
		prruo.SetTokenValue(*s)
	}
	return prruo
}

// SetExpirationTime sets the "expiration_time" field.
func (prruo *PasswordResetRequestUpdateOne) SetExpirationTime(t time.Time) *PasswordResetRequestUpdateOne {
	prruo.mutation.SetExpirationTime(t)
	return prruo
}

// SetNillableExpirationTime sets the "expiration_time" field if the given value is not nil.
func (prruo *PasswordResetRequestUpdateOne) SetNillableExpirationTime(t *time.Time) *PasswordResetRequestUpdateOne {
	if t != nil {
		prruo.SetExpirationTime(*t)
	}
	return prruo
}

// SetUser sets the "user" edge to the User entity.
func (prruo *PasswordResetRequestUpdateOne) SetUser(u *User) *PasswordResetRequestUpdateOne {
	return prruo.SetUserID(u.ID)
}

// Mutation returns the PasswordResetRequestMutation object of the builder.
func (prruo *PasswordResetRequestUpdateOne) Mutation() *PasswordResetRequestMutation {
	return prruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (prruo *PasswordResetRequestUpdateOne) ClearUser() *PasswordResetRequestUpdateOne {
	prruo.mutation.ClearUser()
	return prruo
}

// Where appends a list predicates to the PasswordResetRequestUpdate builder.
func (prruo *PasswordResetRequestUpdateOne) Where(ps ...predicate.PasswordResetRequest) *PasswordResetRequestUpdateOne {
	prruo.mutation.Where(ps...)
	return prruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (prruo *PasswordResetRequestUpdateOne) Select(field string, fields ...string) *PasswordResetRequestUpdateOne {
	prruo.fields = append([]string{field}, fields...)
	return prruo
}

// Save executes the query and returns the updated PasswordResetRequest entity.
func (prruo *PasswordResetRequestUpdateOne) Save(ctx context.Context) (*PasswordResetRequest, error) {
	return withHooks(ctx, prruo.sqlSave, prruo.mutation, prruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (prruo *PasswordResetRequestUpdateOne) SaveX(ctx context.Context) *PasswordResetRequest {
	node, err := prruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (prruo *PasswordResetRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := prruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prruo *PasswordResetRequestUpdateOne) ExecX(ctx context.Context) {
	if err := prruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (prruo *PasswordResetRequestUpdateOne) sqlSave(ctx context.Context) (_node *PasswordResetRequest, err error) {
	_spec := sqlgraph.NewUpdateSpec(passwordresetrequest.Table, passwordresetrequest.Columns, sqlgraph.NewFieldSpec(passwordresetrequest.FieldID, field.TypeInt))
	id, ok := prruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PasswordResetRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := prruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, passwordresetrequest.FieldID)
		for _, f := range fields {
			if !passwordresetrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != passwordresetrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := prruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prruo.mutation.TokenValue(); ok {
		_spec.SetField(passwordresetrequest.FieldTokenValue, field.TypeString, value)
	}
	if value, ok := prruo.mutation.ExpirationTime(); ok {
		_spec.SetField(passwordresetrequest.FieldExpirationTime, field.TypeTime, value)
	}
	if prruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordresetrequest.UserTable,
			Columns: []string{passwordresetrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordresetrequest.UserTable,
			Columns: []string{passwordresetrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PasswordResetRequest{config: prruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, prruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passwordresetrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	prruo.mutation.done = true
	return _node, nil
}
