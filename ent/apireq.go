// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.com/hedwig-phan/assignment-3/ent/apireq"
)

// Apireq is the model entity for the Apireq schema.
type Apireq struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ReqTime holds the value of the "req_time" field.
	ReqTime time.Time `json:"req_time,omitempty"`
	// ReqParam holds the value of the "req_param" field.
	ReqParam map[string]interface{} `json:"req_param,omitempty"`
	// ReqBody holds the value of the "req_body" field.
	ReqBody map[string]interface{} `json:"req_body,omitempty"`
	// ReqHeaders holds the value of the "req_headers" field.
	ReqHeaders map[string]interface{} `json:"req_headers,omitempty"`
	// ReqMetadata holds the value of the "req_metadata" field.
	ReqMetadata map[string]interface{} `json:"req_metadata,omitempty"`
	// RespTime holds the value of the "resp_time" field.
	RespTime time.Time `json:"resp_time,omitempty"`
	// RespStatus holds the value of the "resp_status" field.
	RespStatus int `json:"resp_status,omitempty"`
	// RespBody holds the value of the "resp_body" field.
	RespBody map[string]interface{} `json:"resp_body,omitempty"`
	// RespHeaders holds the value of the "resp_headers" field.
	RespHeaders map[string]interface{} `json:"resp_headers,omitempty"`
	// RespMetadata holds the value of the "resp_metadata" field.
	RespMetadata map[string]interface{} `json:"resp_metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt    time.Time `json:"deleted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Apireq) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apireq.FieldReqParam, apireq.FieldReqBody, apireq.FieldReqHeaders, apireq.FieldReqMetadata, apireq.FieldRespBody, apireq.FieldRespHeaders, apireq.FieldRespMetadata:
			values[i] = new([]byte)
		case apireq.FieldID, apireq.FieldRespStatus:
			values[i] = new(sql.NullInt64)
		case apireq.FieldReqTime, apireq.FieldRespTime, apireq.FieldCreatedAt, apireq.FieldUpdatedAt, apireq.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Apireq fields.
func (a *Apireq) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apireq.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case apireq.FieldReqTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field req_time", values[i])
			} else if value.Valid {
				a.ReqTime = value.Time
			}
		case apireq.FieldReqParam:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field req_param", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.ReqParam); err != nil {
					return fmt.Errorf("unmarshal field req_param: %w", err)
				}
			}
		case apireq.FieldReqBody:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field req_body", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.ReqBody); err != nil {
					return fmt.Errorf("unmarshal field req_body: %w", err)
				}
			}
		case apireq.FieldReqHeaders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field req_headers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.ReqHeaders); err != nil {
					return fmt.Errorf("unmarshal field req_headers: %w", err)
				}
			}
		case apireq.FieldReqMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field req_metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.ReqMetadata); err != nil {
					return fmt.Errorf("unmarshal field req_metadata: %w", err)
				}
			}
		case apireq.FieldRespTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field resp_time", values[i])
			} else if value.Valid {
				a.RespTime = value.Time
			}
		case apireq.FieldRespStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resp_status", values[i])
			} else if value.Valid {
				a.RespStatus = int(value.Int64)
			}
		case apireq.FieldRespBody:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field resp_body", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.RespBody); err != nil {
					return fmt.Errorf("unmarshal field resp_body: %w", err)
				}
			}
		case apireq.FieldRespHeaders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field resp_headers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.RespHeaders); err != nil {
					return fmt.Errorf("unmarshal field resp_headers: %w", err)
				}
			}
		case apireq.FieldRespMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field resp_metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.RespMetadata); err != nil {
					return fmt.Errorf("unmarshal field resp_metadata: %w", err)
				}
			}
		case apireq.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case apireq.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case apireq.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = value.Time
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Apireq.
// This includes values selected through modifiers, order, etc.
func (a *Apireq) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Apireq.
// Note that you need to call Apireq.Unwrap() before calling this method if this Apireq
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Apireq) Update() *ApireqUpdateOne {
	return NewApireqClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Apireq entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Apireq) Unwrap() *Apireq {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Apireq is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Apireq) String() string {
	var builder strings.Builder
	builder.WriteString("Apireq(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("req_time=")
	builder.WriteString(a.ReqTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("req_param=")
	builder.WriteString(fmt.Sprintf("%v", a.ReqParam))
	builder.WriteString(", ")
	builder.WriteString("req_body=")
	builder.WriteString(fmt.Sprintf("%v", a.ReqBody))
	builder.WriteString(", ")
	builder.WriteString("req_headers=")
	builder.WriteString(fmt.Sprintf("%v", a.ReqHeaders))
	builder.WriteString(", ")
	builder.WriteString("req_metadata=")
	builder.WriteString(fmt.Sprintf("%v", a.ReqMetadata))
	builder.WriteString(", ")
	builder.WriteString("resp_time=")
	builder.WriteString(a.RespTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("resp_status=")
	builder.WriteString(fmt.Sprintf("%v", a.RespStatus))
	builder.WriteString(", ")
	builder.WriteString("resp_body=")
	builder.WriteString(fmt.Sprintf("%v", a.RespBody))
	builder.WriteString(", ")
	builder.WriteString("resp_headers=")
	builder.WriteString(fmt.Sprintf("%v", a.RespHeaders))
	builder.WriteString(", ")
	builder.WriteString("resp_metadata=")
	builder.WriteString(fmt.Sprintf("%v", a.RespMetadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(a.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Apireqs is a parsable slice of Apireq.
type Apireqs []*Apireq
