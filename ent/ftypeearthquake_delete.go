// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/hedwig-phan/assignment-3/ent/ftypeearthquake"
	"gitlab.com/hedwig-phan/assignment-3/ent/predicate"
)

// FtypeEarthquakeDelete is the builder for deleting a FtypeEarthquake entity.
type FtypeEarthquakeDelete struct {
	config
	hooks    []Hook
	mutation *FtypeEarthquakeMutation
}

// Where appends a list predicates to the FtypeEarthquakeDelete builder.
func (fed *FtypeEarthquakeDelete) Where(ps ...predicate.FtypeEarthquake) *FtypeEarthquakeDelete {
	fed.mutation.Where(ps...)
	return fed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fed *FtypeEarthquakeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fed.sqlExec, fed.mutation, fed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fed *FtypeEarthquakeDelete) ExecX(ctx context.Context) int {
	n, err := fed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fed *FtypeEarthquakeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(ftypeearthquake.Table, sqlgraph.NewFieldSpec(ftypeearthquake.FieldID, field.TypeInt))
	if ps := fed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fed.mutation.done = true
	return affected, err
}

// FtypeEarthquakeDeleteOne is the builder for deleting a single FtypeEarthquake entity.
type FtypeEarthquakeDeleteOne struct {
	fed *FtypeEarthquakeDelete
}

// Where appends a list predicates to the FtypeEarthquakeDelete builder.
func (fedo *FtypeEarthquakeDeleteOne) Where(ps ...predicate.FtypeEarthquake) *FtypeEarthquakeDeleteOne {
	fedo.fed.mutation.Where(ps...)
	return fedo
}

// Exec executes the deletion query.
func (fedo *FtypeEarthquakeDeleteOne) Exec(ctx context.Context) error {
	n, err := fedo.fed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ftypeearthquake.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fedo *FtypeEarthquakeDeleteOne) ExecX(ctx context.Context) {
	if err := fedo.Exec(ctx); err != nil {
		panic(err)
	}
}
