// Code generated by ent, DO NOT EDIT.

package geometry

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.com/hedwig-phan/assignment-3/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Geometry {
	return predicate.Geometry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Geometry {
	return predicate.Geometry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Geometry {
	return predicate.Geometry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Geometry {
	return predicate.Geometry(sql.FieldLTE(FieldID, id))
}

// LocationID applies equality check predicate on the "location_id" field. It's identical to LocationIDEQ.
func LocationID(v int) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldLocationID, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldLongitude, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldLatitude, v))
}

// Depth applies equality check predicate on the "depth" field. It's identical to DepthEQ.
func Depth(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldDepth, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldDeletedAt, v))
}

// LocationIDEQ applies the EQ predicate on the "location_id" field.
func LocationIDEQ(v int) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldLocationID, v))
}

// LocationIDNEQ applies the NEQ predicate on the "location_id" field.
func LocationIDNEQ(v int) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldLocationID, v))
}

// LocationIDIn applies the In predicate on the "location_id" field.
func LocationIDIn(vs ...int) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldLocationID, vs...))
}

// LocationIDNotIn applies the NotIn predicate on the "location_id" field.
func LocationIDNotIn(vs ...int) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldLocationID, vs...))
}

// LocationIDIsNil applies the IsNil predicate on the "location_id" field.
func LocationIDIsNil() predicate.Geometry {
	return predicate.Geometry(sql.FieldIsNull(FieldLocationID))
}

// LocationIDNotNil applies the NotNil predicate on the "location_id" field.
func LocationIDNotNil() predicate.Geometry {
	return predicate.Geometry(sql.FieldNotNull(FieldLocationID))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldLTE(FieldLongitude, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldLTE(FieldLatitude, v))
}

// DepthEQ applies the EQ predicate on the "depth" field.
func DepthEQ(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldDepth, v))
}

// DepthNEQ applies the NEQ predicate on the "depth" field.
func DepthNEQ(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldDepth, v))
}

// DepthIn applies the In predicate on the "depth" field.
func DepthIn(vs ...float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldDepth, vs...))
}

// DepthNotIn applies the NotIn predicate on the "depth" field.
func DepthNotIn(vs ...float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldDepth, vs...))
}

// DepthGT applies the GT predicate on the "depth" field.
func DepthGT(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldGT(FieldDepth, v))
}

// DepthGTE applies the GTE predicate on the "depth" field.
func DepthGTE(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldGTE(FieldDepth, v))
}

// DepthLT applies the LT predicate on the "depth" field.
func DepthLT(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldLT(FieldDepth, v))
}

// DepthLTE applies the LTE predicate on the "depth" field.
func DepthLTE(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldLTE(FieldDepth, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Geometry {
	return predicate.Geometry(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Geometry {
	return predicate.Geometry(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Geometry {
	return predicate.Geometry(sql.FieldNotNull(FieldDeletedAt))
}

// HasEarthquakes applies the HasEdge predicate on the "earthquakes" edge.
func HasEarthquakes() predicate.Geometry {
	return predicate.Geometry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EarthquakesTable, EarthquakesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEarthquakesWith applies the HasEdge predicate on the "earthquakes" edge with a given conditions (other predicates).
func HasEarthquakesWith(preds ...predicate.Earthquake) predicate.Geometry {
	return predicate.Geometry(func(s *sql.Selector) {
		step := newEarthquakesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLocation applies the HasEdge predicate on the "location" edge.
func HasLocation() predicate.Geometry {
	return predicate.Geometry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LocationTable, LocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationWith applies the HasEdge predicate on the "location" edge with a given conditions (other predicates).
func HasLocationWith(preds ...predicate.Location) predicate.Geometry {
	return predicate.Geometry(func(s *sql.Selector) {
		step := newLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Geometry) predicate.Geometry {
	return predicate.Geometry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Geometry) predicate.Geometry {
	return predicate.Geometry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Geometry) predicate.Geometry {
	return predicate.Geometry(sql.NotPredicates(p))
}
