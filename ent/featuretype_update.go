// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/hedwig-phan/assignment-3/ent/featuretype"
	"gitlab.com/hedwig-phan/assignment-3/ent/ftypeearthquake"
	"gitlab.com/hedwig-phan/assignment-3/ent/predicate"
)

// FeatureTypeUpdate is the builder for updating FeatureType entities.
type FeatureTypeUpdate struct {
	config
	hooks    []Hook
	mutation *FeatureTypeMutation
}

// Where appends a list predicates to the FeatureTypeUpdate builder.
func (ftu *FeatureTypeUpdate) Where(ps ...predicate.FeatureType) *FeatureTypeUpdate {
	ftu.mutation.Where(ps...)
	return ftu
}

// SetFeatType sets the "feat_type" field.
func (ftu *FeatureTypeUpdate) SetFeatType(s string) *FeatureTypeUpdate {
	ftu.mutation.SetFeatType(s)
	return ftu
}

// SetNillableFeatType sets the "feat_type" field if the given value is not nil.
func (ftu *FeatureTypeUpdate) SetNillableFeatType(s *string) *FeatureTypeUpdate {
	if s != nil {
		ftu.SetFeatType(*s)
	}
	return ftu
}

// ClearFeatType clears the value of the "feat_type" field.
func (ftu *FeatureTypeUpdate) ClearFeatType() *FeatureTypeUpdate {
	ftu.mutation.ClearFeatType()
	return ftu
}

// SetCreatedAt sets the "created_at" field.
func (ftu *FeatureTypeUpdate) SetCreatedAt(t time.Time) *FeatureTypeUpdate {
	ftu.mutation.SetCreatedAt(t)
	return ftu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ftu *FeatureTypeUpdate) SetNillableCreatedAt(t *time.Time) *FeatureTypeUpdate {
	if t != nil {
		ftu.SetCreatedAt(*t)
	}
	return ftu
}

// SetUpdatedAt sets the "updated_at" field.
func (ftu *FeatureTypeUpdate) SetUpdatedAt(t time.Time) *FeatureTypeUpdate {
	ftu.mutation.SetUpdatedAt(t)
	return ftu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ftu *FeatureTypeUpdate) SetNillableUpdatedAt(t *time.Time) *FeatureTypeUpdate {
	if t != nil {
		ftu.SetUpdatedAt(*t)
	}
	return ftu
}

// SetDeletedAt sets the "deleted_at" field.
func (ftu *FeatureTypeUpdate) SetDeletedAt(t time.Time) *FeatureTypeUpdate {
	ftu.mutation.SetDeletedAt(t)
	return ftu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ftu *FeatureTypeUpdate) SetNillableDeletedAt(t *time.Time) *FeatureTypeUpdate {
	if t != nil {
		ftu.SetDeletedAt(*t)
	}
	return ftu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ftu *FeatureTypeUpdate) ClearDeletedAt() *FeatureTypeUpdate {
	ftu.mutation.ClearDeletedAt()
	return ftu
}

// AddFtypeEarthquakeIDs adds the "ftype_earthquakes" edge to the FtypeEarthquake entity by IDs.
func (ftu *FeatureTypeUpdate) AddFtypeEarthquakeIDs(ids ...int) *FeatureTypeUpdate {
	ftu.mutation.AddFtypeEarthquakeIDs(ids...)
	return ftu
}

// AddFtypeEarthquakes adds the "ftype_earthquakes" edges to the FtypeEarthquake entity.
func (ftu *FeatureTypeUpdate) AddFtypeEarthquakes(f ...*FtypeEarthquake) *FeatureTypeUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ftu.AddFtypeEarthquakeIDs(ids...)
}

// Mutation returns the FeatureTypeMutation object of the builder.
func (ftu *FeatureTypeUpdate) Mutation() *FeatureTypeMutation {
	return ftu.mutation
}

// ClearFtypeEarthquakes clears all "ftype_earthquakes" edges to the FtypeEarthquake entity.
func (ftu *FeatureTypeUpdate) ClearFtypeEarthquakes() *FeatureTypeUpdate {
	ftu.mutation.ClearFtypeEarthquakes()
	return ftu
}

// RemoveFtypeEarthquakeIDs removes the "ftype_earthquakes" edge to FtypeEarthquake entities by IDs.
func (ftu *FeatureTypeUpdate) RemoveFtypeEarthquakeIDs(ids ...int) *FeatureTypeUpdate {
	ftu.mutation.RemoveFtypeEarthquakeIDs(ids...)
	return ftu
}

// RemoveFtypeEarthquakes removes "ftype_earthquakes" edges to FtypeEarthquake entities.
func (ftu *FeatureTypeUpdate) RemoveFtypeEarthquakes(f ...*FtypeEarthquake) *FeatureTypeUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ftu.RemoveFtypeEarthquakeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ftu *FeatureTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ftu.sqlSave, ftu.mutation, ftu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ftu *FeatureTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ftu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ftu *FeatureTypeUpdate) Exec(ctx context.Context) error {
	_, err := ftu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftu *FeatureTypeUpdate) ExecX(ctx context.Context) {
	if err := ftu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ftu *FeatureTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(featuretype.Table, featuretype.Columns, sqlgraph.NewFieldSpec(featuretype.FieldID, field.TypeInt))
	if ps := ftu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ftu.mutation.FeatType(); ok {
		_spec.SetField(featuretype.FieldFeatType, field.TypeString, value)
	}
	if ftu.mutation.FeatTypeCleared() {
		_spec.ClearField(featuretype.FieldFeatType, field.TypeString)
	}
	if value, ok := ftu.mutation.CreatedAt(); ok {
		_spec.SetField(featuretype.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ftu.mutation.UpdatedAt(); ok {
		_spec.SetField(featuretype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ftu.mutation.DeletedAt(); ok {
		_spec.SetField(featuretype.FieldDeletedAt, field.TypeTime, value)
	}
	if ftu.mutation.DeletedAtCleared() {
		_spec.ClearField(featuretype.FieldDeletedAt, field.TypeTime)
	}
	if ftu.mutation.FtypeEarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuretype.FtypeEarthquakesTable,
			Columns: []string{featuretype.FtypeEarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ftypeearthquake.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftu.mutation.RemovedFtypeEarthquakesIDs(); len(nodes) > 0 && !ftu.mutation.FtypeEarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuretype.FtypeEarthquakesTable,
			Columns: []string{featuretype.FtypeEarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ftypeearthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftu.mutation.FtypeEarthquakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuretype.FtypeEarthquakesTable,
			Columns: []string{featuretype.FtypeEarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ftypeearthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ftu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featuretype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ftu.mutation.done = true
	return n, nil
}

// FeatureTypeUpdateOne is the builder for updating a single FeatureType entity.
type FeatureTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeatureTypeMutation
}

// SetFeatType sets the "feat_type" field.
func (ftuo *FeatureTypeUpdateOne) SetFeatType(s string) *FeatureTypeUpdateOne {
	ftuo.mutation.SetFeatType(s)
	return ftuo
}

// SetNillableFeatType sets the "feat_type" field if the given value is not nil.
func (ftuo *FeatureTypeUpdateOne) SetNillableFeatType(s *string) *FeatureTypeUpdateOne {
	if s != nil {
		ftuo.SetFeatType(*s)
	}
	return ftuo
}

// ClearFeatType clears the value of the "feat_type" field.
func (ftuo *FeatureTypeUpdateOne) ClearFeatType() *FeatureTypeUpdateOne {
	ftuo.mutation.ClearFeatType()
	return ftuo
}

// SetCreatedAt sets the "created_at" field.
func (ftuo *FeatureTypeUpdateOne) SetCreatedAt(t time.Time) *FeatureTypeUpdateOne {
	ftuo.mutation.SetCreatedAt(t)
	return ftuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ftuo *FeatureTypeUpdateOne) SetNillableCreatedAt(t *time.Time) *FeatureTypeUpdateOne {
	if t != nil {
		ftuo.SetCreatedAt(*t)
	}
	return ftuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ftuo *FeatureTypeUpdateOne) SetUpdatedAt(t time.Time) *FeatureTypeUpdateOne {
	ftuo.mutation.SetUpdatedAt(t)
	return ftuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ftuo *FeatureTypeUpdateOne) SetNillableUpdatedAt(t *time.Time) *FeatureTypeUpdateOne {
	if t != nil {
		ftuo.SetUpdatedAt(*t)
	}
	return ftuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ftuo *FeatureTypeUpdateOne) SetDeletedAt(t time.Time) *FeatureTypeUpdateOne {
	ftuo.mutation.SetDeletedAt(t)
	return ftuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ftuo *FeatureTypeUpdateOne) SetNillableDeletedAt(t *time.Time) *FeatureTypeUpdateOne {
	if t != nil {
		ftuo.SetDeletedAt(*t)
	}
	return ftuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ftuo *FeatureTypeUpdateOne) ClearDeletedAt() *FeatureTypeUpdateOne {
	ftuo.mutation.ClearDeletedAt()
	return ftuo
}

// AddFtypeEarthquakeIDs adds the "ftype_earthquakes" edge to the FtypeEarthquake entity by IDs.
func (ftuo *FeatureTypeUpdateOne) AddFtypeEarthquakeIDs(ids ...int) *FeatureTypeUpdateOne {
	ftuo.mutation.AddFtypeEarthquakeIDs(ids...)
	return ftuo
}

// AddFtypeEarthquakes adds the "ftype_earthquakes" edges to the FtypeEarthquake entity.
func (ftuo *FeatureTypeUpdateOne) AddFtypeEarthquakes(f ...*FtypeEarthquake) *FeatureTypeUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ftuo.AddFtypeEarthquakeIDs(ids...)
}

// Mutation returns the FeatureTypeMutation object of the builder.
func (ftuo *FeatureTypeUpdateOne) Mutation() *FeatureTypeMutation {
	return ftuo.mutation
}

// ClearFtypeEarthquakes clears all "ftype_earthquakes" edges to the FtypeEarthquake entity.
func (ftuo *FeatureTypeUpdateOne) ClearFtypeEarthquakes() *FeatureTypeUpdateOne {
	ftuo.mutation.ClearFtypeEarthquakes()
	return ftuo
}

// RemoveFtypeEarthquakeIDs removes the "ftype_earthquakes" edge to FtypeEarthquake entities by IDs.
func (ftuo *FeatureTypeUpdateOne) RemoveFtypeEarthquakeIDs(ids ...int) *FeatureTypeUpdateOne {
	ftuo.mutation.RemoveFtypeEarthquakeIDs(ids...)
	return ftuo
}

// RemoveFtypeEarthquakes removes "ftype_earthquakes" edges to FtypeEarthquake entities.
func (ftuo *FeatureTypeUpdateOne) RemoveFtypeEarthquakes(f ...*FtypeEarthquake) *FeatureTypeUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ftuo.RemoveFtypeEarthquakeIDs(ids...)
}

// Where appends a list predicates to the FeatureTypeUpdate builder.
func (ftuo *FeatureTypeUpdateOne) Where(ps ...predicate.FeatureType) *FeatureTypeUpdateOne {
	ftuo.mutation.Where(ps...)
	return ftuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ftuo *FeatureTypeUpdateOne) Select(field string, fields ...string) *FeatureTypeUpdateOne {
	ftuo.fields = append([]string{field}, fields...)
	return ftuo
}

// Save executes the query and returns the updated FeatureType entity.
func (ftuo *FeatureTypeUpdateOne) Save(ctx context.Context) (*FeatureType, error) {
	return withHooks(ctx, ftuo.sqlSave, ftuo.mutation, ftuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ftuo *FeatureTypeUpdateOne) SaveX(ctx context.Context) *FeatureType {
	node, err := ftuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ftuo *FeatureTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ftuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftuo *FeatureTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ftuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ftuo *FeatureTypeUpdateOne) sqlSave(ctx context.Context) (_node *FeatureType, err error) {
	_spec := sqlgraph.NewUpdateSpec(featuretype.Table, featuretype.Columns, sqlgraph.NewFieldSpec(featuretype.FieldID, field.TypeInt))
	id, ok := ftuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeatureType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ftuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, featuretype.FieldID)
		for _, f := range fields {
			if !featuretype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != featuretype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ftuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ftuo.mutation.FeatType(); ok {
		_spec.SetField(featuretype.FieldFeatType, field.TypeString, value)
	}
	if ftuo.mutation.FeatTypeCleared() {
		_spec.ClearField(featuretype.FieldFeatType, field.TypeString)
	}
	if value, ok := ftuo.mutation.CreatedAt(); ok {
		_spec.SetField(featuretype.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ftuo.mutation.UpdatedAt(); ok {
		_spec.SetField(featuretype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ftuo.mutation.DeletedAt(); ok {
		_spec.SetField(featuretype.FieldDeletedAt, field.TypeTime, value)
	}
	if ftuo.mutation.DeletedAtCleared() {
		_spec.ClearField(featuretype.FieldDeletedAt, field.TypeTime)
	}
	if ftuo.mutation.FtypeEarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuretype.FtypeEarthquakesTable,
			Columns: []string{featuretype.FtypeEarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ftypeearthquake.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftuo.mutation.RemovedFtypeEarthquakesIDs(); len(nodes) > 0 && !ftuo.mutation.FtypeEarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuretype.FtypeEarthquakesTable,
			Columns: []string{featuretype.FtypeEarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ftypeearthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftuo.mutation.FtypeEarthquakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuretype.FtypeEarthquakesTable,
			Columns: []string{featuretype.FtypeEarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ftypeearthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FeatureType{config: ftuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ftuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featuretype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ftuo.mutation.done = true
	return _node, nil
}
