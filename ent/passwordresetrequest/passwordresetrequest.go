// Code generated by ent, DO NOT EDIT.

package passwordresetrequest

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the passwordresetrequest type in the database.
	Label = "password_reset_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTokenValue holds the string denoting the token_value field in the database.
	FieldTokenValue = "token_value"
	// FieldExpirationTime holds the string denoting the expiration_time field in the database.
	FieldExpirationTime = "expiration_time"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the passwordresetrequest in the database.
	Table = "password_reset_request"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "password_reset_request"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "user"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for passwordresetrequest fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTokenValue,
	FieldExpirationTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PasswordResetRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTokenValue orders the results by the token_value field.
func ByTokenValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenValue, opts...).ToFunc()
}

// ByExpirationTime orders the results by the expiration_time field.
func ByExpirationTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpirationTime, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
