// Code generated by ent, DO NOT EDIT.

package featuretype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the featuretype type in the database.
	Label = "feature_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFeatType holds the string denoting the feat_type field in the database.
	FieldFeatType = "feat_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeFtypeEarthquakes holds the string denoting the ftype_earthquakes edge name in mutations.
	EdgeFtypeEarthquakes = "ftype_earthquakes"
	// Table holds the table name of the featuretype in the database.
	Table = "feature_type"
	// FtypeEarthquakesTable is the table that holds the ftype_earthquakes relation/edge.
	FtypeEarthquakesTable = "ftype_earthquake"
	// FtypeEarthquakesInverseTable is the table name for the FtypeEarthquake entity.
	// It exists in this package in order to avoid circular dependency with the "ftypeearthquake" package.
	FtypeEarthquakesInverseTable = "ftype_earthquake"
	// FtypeEarthquakesColumn is the table column denoting the ftype_earthquakes relation/edge.
	FtypeEarthquakesColumn = "ft_id"
)

// Columns holds all SQL columns for featuretype fields.
var Columns = []string{
	FieldID,
	FieldFeatType,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the FeatureType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFeatType orders the results by the feat_type field.
func ByFeatType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByFtypeEarthquakesCount orders the results by ftype_earthquakes count.
func ByFtypeEarthquakesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFtypeEarthquakesStep(), opts...)
	}
}

// ByFtypeEarthquakes orders the results by ftype_earthquakes terms.
func ByFtypeEarthquakes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFtypeEarthquakesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFtypeEarthquakesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FtypeEarthquakesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FtypeEarthquakesTable, FtypeEarthquakesColumn),
	)
}
