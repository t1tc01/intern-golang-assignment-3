// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.com/hedwig-phan/assignment-3/ent/passwordresetrequest"
	"gitlab.com/hedwig-phan/assignment-3/ent/user"
)

// PasswordResetRequest is the model entity for the PasswordResetRequest schema.
type PasswordResetRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// TokenValue holds the value of the "token_value" field.
	TokenValue string `json:"token_value,omitempty"`
	// ExpirationTime holds the value of the "expiration_time" field.
	ExpirationTime time.Time `json:"expiration_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PasswordResetRequestQuery when eager-loading is set.
	Edges        PasswordResetRequestEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PasswordResetRequestEdges holds the relations/edges for other nodes in the graph.
type PasswordResetRequestEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PasswordResetRequestEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PasswordResetRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case passwordresetrequest.FieldID, passwordresetrequest.FieldUserID:
			values[i] = new(sql.NullInt64)
		case passwordresetrequest.FieldTokenValue:
			values[i] = new(sql.NullString)
		case passwordresetrequest.FieldExpirationTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PasswordResetRequest fields.
func (prr *PasswordResetRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case passwordresetrequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			prr.ID = int(value.Int64)
		case passwordresetrequest.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				prr.UserID = int(value.Int64)
			}
		case passwordresetrequest.FieldTokenValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_value", values[i])
			} else if value.Valid {
				prr.TokenValue = value.String
			}
		case passwordresetrequest.FieldExpirationTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiration_time", values[i])
			} else if value.Valid {
				prr.ExpirationTime = value.Time
			}
		default:
			prr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PasswordResetRequest.
// This includes values selected through modifiers, order, etc.
func (prr *PasswordResetRequest) Value(name string) (ent.Value, error) {
	return prr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the PasswordResetRequest entity.
func (prr *PasswordResetRequest) QueryUser() *UserQuery {
	return NewPasswordResetRequestClient(prr.config).QueryUser(prr)
}

// Update returns a builder for updating this PasswordResetRequest.
// Note that you need to call PasswordResetRequest.Unwrap() before calling this method if this PasswordResetRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (prr *PasswordResetRequest) Update() *PasswordResetRequestUpdateOne {
	return NewPasswordResetRequestClient(prr.config).UpdateOne(prr)
}

// Unwrap unwraps the PasswordResetRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (prr *PasswordResetRequest) Unwrap() *PasswordResetRequest {
	_tx, ok := prr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PasswordResetRequest is not a transactional entity")
	}
	prr.config.driver = _tx.drv
	return prr
}

// String implements the fmt.Stringer.
func (prr *PasswordResetRequest) String() string {
	var builder strings.Builder
	builder.WriteString("PasswordResetRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", prr.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", prr.UserID))
	builder.WriteString(", ")
	builder.WriteString("token_value=")
	builder.WriteString(prr.TokenValue)
	builder.WriteString(", ")
	builder.WriteString("expiration_time=")
	builder.WriteString(prr.ExpirationTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PasswordResetRequests is a parsable slice of PasswordResetRequest.
type PasswordResetRequests []*PasswordResetRequest
