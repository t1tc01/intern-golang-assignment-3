// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/hedwig-phan/assignment-3/ent/featuretype"
	"gitlab.com/hedwig-phan/assignment-3/ent/ftypeearthquake"
)

// FeatureTypeCreate is the builder for creating a FeatureType entity.
type FeatureTypeCreate struct {
	config
	mutation *FeatureTypeMutation
	hooks    []Hook
}

// SetFeatType sets the "feat_type" field.
func (ftc *FeatureTypeCreate) SetFeatType(s string) *FeatureTypeCreate {
	ftc.mutation.SetFeatType(s)
	return ftc
}

// SetNillableFeatType sets the "feat_type" field if the given value is not nil.
func (ftc *FeatureTypeCreate) SetNillableFeatType(s *string) *FeatureTypeCreate {
	if s != nil {
		ftc.SetFeatType(*s)
	}
	return ftc
}

// SetCreatedAt sets the "created_at" field.
func (ftc *FeatureTypeCreate) SetCreatedAt(t time.Time) *FeatureTypeCreate {
	ftc.mutation.SetCreatedAt(t)
	return ftc
}

// SetUpdatedAt sets the "updated_at" field.
func (ftc *FeatureTypeCreate) SetUpdatedAt(t time.Time) *FeatureTypeCreate {
	ftc.mutation.SetUpdatedAt(t)
	return ftc
}

// SetDeletedAt sets the "deleted_at" field.
func (ftc *FeatureTypeCreate) SetDeletedAt(t time.Time) *FeatureTypeCreate {
	ftc.mutation.SetDeletedAt(t)
	return ftc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ftc *FeatureTypeCreate) SetNillableDeletedAt(t *time.Time) *FeatureTypeCreate {
	if t != nil {
		ftc.SetDeletedAt(*t)
	}
	return ftc
}

// SetID sets the "id" field.
func (ftc *FeatureTypeCreate) SetID(i int) *FeatureTypeCreate {
	ftc.mutation.SetID(i)
	return ftc
}

// AddFtypeEarthquakeIDs adds the "ftype_earthquakes" edge to the FtypeEarthquake entity by IDs.
func (ftc *FeatureTypeCreate) AddFtypeEarthquakeIDs(ids ...int) *FeatureTypeCreate {
	ftc.mutation.AddFtypeEarthquakeIDs(ids...)
	return ftc
}

// AddFtypeEarthquakes adds the "ftype_earthquakes" edges to the FtypeEarthquake entity.
func (ftc *FeatureTypeCreate) AddFtypeEarthquakes(f ...*FtypeEarthquake) *FeatureTypeCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ftc.AddFtypeEarthquakeIDs(ids...)
}

// Mutation returns the FeatureTypeMutation object of the builder.
func (ftc *FeatureTypeCreate) Mutation() *FeatureTypeMutation {
	return ftc.mutation
}

// Save creates the FeatureType in the database.
func (ftc *FeatureTypeCreate) Save(ctx context.Context) (*FeatureType, error) {
	return withHooks(ctx, ftc.sqlSave, ftc.mutation, ftc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ftc *FeatureTypeCreate) SaveX(ctx context.Context) *FeatureType {
	v, err := ftc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ftc *FeatureTypeCreate) Exec(ctx context.Context) error {
	_, err := ftc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftc *FeatureTypeCreate) ExecX(ctx context.Context) {
	if err := ftc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftc *FeatureTypeCreate) check() error {
	if _, ok := ftc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FeatureType.created_at"`)}
	}
	if _, ok := ftc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FeatureType.updated_at"`)}
	}
	return nil
}

func (ftc *FeatureTypeCreate) sqlSave(ctx context.Context) (*FeatureType, error) {
	if err := ftc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ftc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ftc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ftc.mutation.id = &_node.ID
	ftc.mutation.done = true
	return _node, nil
}

func (ftc *FeatureTypeCreate) createSpec() (*FeatureType, *sqlgraph.CreateSpec) {
	var (
		_node = &FeatureType{config: ftc.config}
		_spec = sqlgraph.NewCreateSpec(featuretype.Table, sqlgraph.NewFieldSpec(featuretype.FieldID, field.TypeInt))
	)
	if id, ok := ftc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ftc.mutation.FeatType(); ok {
		_spec.SetField(featuretype.FieldFeatType, field.TypeString, value)
		_node.FeatType = value
	}
	if value, ok := ftc.mutation.CreatedAt(); ok {
		_spec.SetField(featuretype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ftc.mutation.UpdatedAt(); ok {
		_spec.SetField(featuretype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ftc.mutation.DeletedAt(); ok {
		_spec.SetField(featuretype.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := ftc.mutation.FtypeEarthquakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuretype.FtypeEarthquakesTable,
			Columns: []string{featuretype.FtypeEarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ftypeearthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FeatureTypeCreateBulk is the builder for creating many FeatureType entities in bulk.
type FeatureTypeCreateBulk struct {
	config
	err      error
	builders []*FeatureTypeCreate
}

// Save creates the FeatureType entities in the database.
func (ftcb *FeatureTypeCreateBulk) Save(ctx context.Context) ([]*FeatureType, error) {
	if ftcb.err != nil {
		return nil, ftcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ftcb.builders))
	nodes := make([]*FeatureType, len(ftcb.builders))
	mutators := make([]Mutator, len(ftcb.builders))
	for i := range ftcb.builders {
		func(i int, root context.Context) {
			builder := ftcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeatureTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ftcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ftcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ftcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ftcb *FeatureTypeCreateBulk) SaveX(ctx context.Context) []*FeatureType {
	v, err := ftcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ftcb *FeatureTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ftcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftcb *FeatureTypeCreateBulk) ExecX(ctx context.Context) {
	if err := ftcb.Exec(ctx); err != nil {
		panic(err)
	}
}
