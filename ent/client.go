// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"gitlab.com/hedwig-phan/assignment-3/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.com/hedwig-phan/assignment-3/ent/apireq"
	"gitlab.com/hedwig-phan/assignment-3/ent/credentials"
	"gitlab.com/hedwig-phan/assignment-3/ent/earthquake"
	"gitlab.com/hedwig-phan/assignment-3/ent/featuretype"
	"gitlab.com/hedwig-phan/assignment-3/ent/ftypeearthquake"
	"gitlab.com/hedwig-phan/assignment-3/ent/geometry"
	"gitlab.com/hedwig-phan/assignment-3/ent/location"
	"gitlab.com/hedwig-phan/assignment-3/ent/passwordresetrequest"
	"gitlab.com/hedwig-phan/assignment-3/ent/report"
	"gitlab.com/hedwig-phan/assignment-3/ent/session"
	"gitlab.com/hedwig-phan/assignment-3/ent/source"
	"gitlab.com/hedwig-phan/assignment-3/ent/sourceearthquake"
	"gitlab.com/hedwig-phan/assignment-3/ent/token"
	"gitlab.com/hedwig-phan/assignment-3/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Apireq is the client for interacting with the Apireq builders.
	Apireq *ApireqClient
	// Credentials is the client for interacting with the Credentials builders.
	Credentials *CredentialsClient
	// Earthquake is the client for interacting with the Earthquake builders.
	Earthquake *EarthquakeClient
	// FeatureType is the client for interacting with the FeatureType builders.
	FeatureType *FeatureTypeClient
	// FtypeEarthquake is the client for interacting with the FtypeEarthquake builders.
	FtypeEarthquake *FtypeEarthquakeClient
	// Geometry is the client for interacting with the Geometry builders.
	Geometry *GeometryClient
	// Location is the client for interacting with the Location builders.
	Location *LocationClient
	// PasswordResetRequest is the client for interacting with the PasswordResetRequest builders.
	PasswordResetRequest *PasswordResetRequestClient
	// Report is the client for interacting with the Report builders.
	Report *ReportClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// Source is the client for interacting with the Source builders.
	Source *SourceClient
	// SourceEarthquake is the client for interacting with the SourceEarthquake builders.
	SourceEarthquake *SourceEarthquakeClient
	// Token is the client for interacting with the Token builders.
	Token *TokenClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Apireq = NewApireqClient(c.config)
	c.Credentials = NewCredentialsClient(c.config)
	c.Earthquake = NewEarthquakeClient(c.config)
	c.FeatureType = NewFeatureTypeClient(c.config)
	c.FtypeEarthquake = NewFtypeEarthquakeClient(c.config)
	c.Geometry = NewGeometryClient(c.config)
	c.Location = NewLocationClient(c.config)
	c.PasswordResetRequest = NewPasswordResetRequestClient(c.config)
	c.Report = NewReportClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.Source = NewSourceClient(c.config)
	c.SourceEarthquake = NewSourceEarthquakeClient(c.config)
	c.Token = NewTokenClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Apireq:               NewApireqClient(cfg),
		Credentials:          NewCredentialsClient(cfg),
		Earthquake:           NewEarthquakeClient(cfg),
		FeatureType:          NewFeatureTypeClient(cfg),
		FtypeEarthquake:      NewFtypeEarthquakeClient(cfg),
		Geometry:             NewGeometryClient(cfg),
		Location:             NewLocationClient(cfg),
		PasswordResetRequest: NewPasswordResetRequestClient(cfg),
		Report:               NewReportClient(cfg),
		Session:              NewSessionClient(cfg),
		Source:               NewSourceClient(cfg),
		SourceEarthquake:     NewSourceEarthquakeClient(cfg),
		Token:                NewTokenClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Apireq:               NewApireqClient(cfg),
		Credentials:          NewCredentialsClient(cfg),
		Earthquake:           NewEarthquakeClient(cfg),
		FeatureType:          NewFeatureTypeClient(cfg),
		FtypeEarthquake:      NewFtypeEarthquakeClient(cfg),
		Geometry:             NewGeometryClient(cfg),
		Location:             NewLocationClient(cfg),
		PasswordResetRequest: NewPasswordResetRequestClient(cfg),
		Report:               NewReportClient(cfg),
		Session:              NewSessionClient(cfg),
		Source:               NewSourceClient(cfg),
		SourceEarthquake:     NewSourceEarthquakeClient(cfg),
		Token:                NewTokenClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Apireq.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Apireq, c.Credentials, c.Earthquake, c.FeatureType, c.FtypeEarthquake,
		c.Geometry, c.Location, c.PasswordResetRequest, c.Report, c.Session, c.Source,
		c.SourceEarthquake, c.Token, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Apireq, c.Credentials, c.Earthquake, c.FeatureType, c.FtypeEarthquake,
		c.Geometry, c.Location, c.PasswordResetRequest, c.Report, c.Session, c.Source,
		c.SourceEarthquake, c.Token, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApireqMutation:
		return c.Apireq.mutate(ctx, m)
	case *CredentialsMutation:
		return c.Credentials.mutate(ctx, m)
	case *EarthquakeMutation:
		return c.Earthquake.mutate(ctx, m)
	case *FeatureTypeMutation:
		return c.FeatureType.mutate(ctx, m)
	case *FtypeEarthquakeMutation:
		return c.FtypeEarthquake.mutate(ctx, m)
	case *GeometryMutation:
		return c.Geometry.mutate(ctx, m)
	case *LocationMutation:
		return c.Location.mutate(ctx, m)
	case *PasswordResetRequestMutation:
		return c.PasswordResetRequest.mutate(ctx, m)
	case *ReportMutation:
		return c.Report.mutate(ctx, m)
	case *SessionMutation:
		return c.Session.mutate(ctx, m)
	case *SourceMutation:
		return c.Source.mutate(ctx, m)
	case *SourceEarthquakeMutation:
		return c.SourceEarthquake.mutate(ctx, m)
	case *TokenMutation:
		return c.Token.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ApireqClient is a client for the Apireq schema.
type ApireqClient struct {
	config
}

// NewApireqClient returns a client for the Apireq from the given config.
func NewApireqClient(c config) *ApireqClient {
	return &ApireqClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apireq.Hooks(f(g(h())))`.
func (c *ApireqClient) Use(hooks ...Hook) {
	c.hooks.Apireq = append(c.hooks.Apireq, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apireq.Intercept(f(g(h())))`.
func (c *ApireqClient) Intercept(interceptors ...Interceptor) {
	c.inters.Apireq = append(c.inters.Apireq, interceptors...)
}

// Create returns a builder for creating a Apireq entity.
func (c *ApireqClient) Create() *ApireqCreate {
	mutation := newApireqMutation(c.config, OpCreate)
	return &ApireqCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Apireq entities.
func (c *ApireqClient) CreateBulk(builders ...*ApireqCreate) *ApireqCreateBulk {
	return &ApireqCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApireqClient) MapCreateBulk(slice any, setFunc func(*ApireqCreate, int)) *ApireqCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApireqCreateBulk{err: fmt.Errorf("calling to ApireqClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApireqCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApireqCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Apireq.
func (c *ApireqClient) Update() *ApireqUpdate {
	mutation := newApireqMutation(c.config, OpUpdate)
	return &ApireqUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApireqClient) UpdateOne(a *Apireq) *ApireqUpdateOne {
	mutation := newApireqMutation(c.config, OpUpdateOne, withApireq(a))
	return &ApireqUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApireqClient) UpdateOneID(id int) *ApireqUpdateOne {
	mutation := newApireqMutation(c.config, OpUpdateOne, withApireqID(id))
	return &ApireqUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Apireq.
func (c *ApireqClient) Delete() *ApireqDelete {
	mutation := newApireqMutation(c.config, OpDelete)
	return &ApireqDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApireqClient) DeleteOne(a *Apireq) *ApireqDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApireqClient) DeleteOneID(id int) *ApireqDeleteOne {
	builder := c.Delete().Where(apireq.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApireqDeleteOne{builder}
}

// Query returns a query builder for Apireq.
func (c *ApireqClient) Query() *ApireqQuery {
	return &ApireqQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApireq},
		inters: c.Interceptors(),
	}
}

// Get returns a Apireq entity by its id.
func (c *ApireqClient) Get(ctx context.Context, id int) (*Apireq, error) {
	return c.Query().Where(apireq.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApireqClient) GetX(ctx context.Context, id int) *Apireq {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ApireqClient) Hooks() []Hook {
	return c.hooks.Apireq
}

// Interceptors returns the client interceptors.
func (c *ApireqClient) Interceptors() []Interceptor {
	return c.inters.Apireq
}

func (c *ApireqClient) mutate(ctx context.Context, m *ApireqMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApireqCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApireqUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApireqUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApireqDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Apireq mutation op: %q", m.Op())
	}
}

// CredentialsClient is a client for the Credentials schema.
type CredentialsClient struct {
	config
}

// NewCredentialsClient returns a client for the Credentials from the given config.
func NewCredentialsClient(c config) *CredentialsClient {
	return &CredentialsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `credentials.Hooks(f(g(h())))`.
func (c *CredentialsClient) Use(hooks ...Hook) {
	c.hooks.Credentials = append(c.hooks.Credentials, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `credentials.Intercept(f(g(h())))`.
func (c *CredentialsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Credentials = append(c.inters.Credentials, interceptors...)
}

// Create returns a builder for creating a Credentials entity.
func (c *CredentialsClient) Create() *CredentialsCreate {
	mutation := newCredentialsMutation(c.config, OpCreate)
	return &CredentialsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Credentials entities.
func (c *CredentialsClient) CreateBulk(builders ...*CredentialsCreate) *CredentialsCreateBulk {
	return &CredentialsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CredentialsClient) MapCreateBulk(slice any, setFunc func(*CredentialsCreate, int)) *CredentialsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CredentialsCreateBulk{err: fmt.Errorf("calling to CredentialsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CredentialsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CredentialsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Credentials.
func (c *CredentialsClient) Update() *CredentialsUpdate {
	mutation := newCredentialsMutation(c.config, OpUpdate)
	return &CredentialsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CredentialsClient) UpdateOne(cr *Credentials) *CredentialsUpdateOne {
	mutation := newCredentialsMutation(c.config, OpUpdateOne, withCredentials(cr))
	return &CredentialsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CredentialsClient) UpdateOneID(id int) *CredentialsUpdateOne {
	mutation := newCredentialsMutation(c.config, OpUpdateOne, withCredentialsID(id))
	return &CredentialsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Credentials.
func (c *CredentialsClient) Delete() *CredentialsDelete {
	mutation := newCredentialsMutation(c.config, OpDelete)
	return &CredentialsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CredentialsClient) DeleteOne(cr *Credentials) *CredentialsDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CredentialsClient) DeleteOneID(id int) *CredentialsDeleteOne {
	builder := c.Delete().Where(credentials.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CredentialsDeleteOne{builder}
}

// Query returns a query builder for Credentials.
func (c *CredentialsClient) Query() *CredentialsQuery {
	return &CredentialsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCredentials},
		inters: c.Interceptors(),
	}
}

// Get returns a Credentials entity by its id.
func (c *CredentialsClient) Get(ctx context.Context, id int) (*Credentials, error) {
	return c.Query().Where(credentials.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CredentialsClient) GetX(ctx context.Context, id int) *Credentials {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Credentials.
func (c *CredentialsClient) QueryUser(cr *Credentials) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(credentials.Table, credentials.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, credentials.UserTable, credentials.UserColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CredentialsClient) Hooks() []Hook {
	return c.hooks.Credentials
}

// Interceptors returns the client interceptors.
func (c *CredentialsClient) Interceptors() []Interceptor {
	return c.inters.Credentials
}

func (c *CredentialsClient) mutate(ctx context.Context, m *CredentialsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CredentialsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CredentialsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CredentialsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CredentialsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Credentials mutation op: %q", m.Op())
	}
}

// EarthquakeClient is a client for the Earthquake schema.
type EarthquakeClient struct {
	config
}

// NewEarthquakeClient returns a client for the Earthquake from the given config.
func NewEarthquakeClient(c config) *EarthquakeClient {
	return &EarthquakeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `earthquake.Hooks(f(g(h())))`.
func (c *EarthquakeClient) Use(hooks ...Hook) {
	c.hooks.Earthquake = append(c.hooks.Earthquake, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `earthquake.Intercept(f(g(h())))`.
func (c *EarthquakeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Earthquake = append(c.inters.Earthquake, interceptors...)
}

// Create returns a builder for creating a Earthquake entity.
func (c *EarthquakeClient) Create() *EarthquakeCreate {
	mutation := newEarthquakeMutation(c.config, OpCreate)
	return &EarthquakeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Earthquake entities.
func (c *EarthquakeClient) CreateBulk(builders ...*EarthquakeCreate) *EarthquakeCreateBulk {
	return &EarthquakeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EarthquakeClient) MapCreateBulk(slice any, setFunc func(*EarthquakeCreate, int)) *EarthquakeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EarthquakeCreateBulk{err: fmt.Errorf("calling to EarthquakeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EarthquakeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EarthquakeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Earthquake.
func (c *EarthquakeClient) Update() *EarthquakeUpdate {
	mutation := newEarthquakeMutation(c.config, OpUpdate)
	return &EarthquakeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EarthquakeClient) UpdateOne(e *Earthquake) *EarthquakeUpdateOne {
	mutation := newEarthquakeMutation(c.config, OpUpdateOne, withEarthquake(e))
	return &EarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EarthquakeClient) UpdateOneID(id int) *EarthquakeUpdateOne {
	mutation := newEarthquakeMutation(c.config, OpUpdateOne, withEarthquakeID(id))
	return &EarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Earthquake.
func (c *EarthquakeClient) Delete() *EarthquakeDelete {
	mutation := newEarthquakeMutation(c.config, OpDelete)
	return &EarthquakeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EarthquakeClient) DeleteOne(e *Earthquake) *EarthquakeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EarthquakeClient) DeleteOneID(id int) *EarthquakeDeleteOne {
	builder := c.Delete().Where(earthquake.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EarthquakeDeleteOne{builder}
}

// Query returns a query builder for Earthquake.
func (c *EarthquakeClient) Query() *EarthquakeQuery {
	return &EarthquakeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEarthquake},
		inters: c.Interceptors(),
	}
}

// Get returns a Earthquake entity by its id.
func (c *EarthquakeClient) Get(ctx context.Context, id int) (*Earthquake, error) {
	return c.Query().Where(earthquake.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EarthquakeClient) GetX(ctx context.Context, id int) *Earthquake {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGeometry queries the geometry edge of a Earthquake.
func (c *EarthquakeClient) QueryGeometry(e *Earthquake) *GeometryQuery {
	query := (&GeometryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(geometry.Table, geometry.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, earthquake.GeometryTable, earthquake.GeometryColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReport queries the report edge of a Earthquake.
func (c *EarthquakeClient) QueryReport(e *Earthquake) *ReportQuery {
	query := (&ReportClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(report.Table, report.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, earthquake.ReportTable, earthquake.ReportColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFtypeEarthquakes queries the ftype_earthquakes edge of a Earthquake.
func (c *EarthquakeClient) QueryFtypeEarthquakes(e *Earthquake) *FtypeEarthquakeQuery {
	query := (&FtypeEarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(ftypeearthquake.Table, ftypeearthquake.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, earthquake.FtypeEarthquakesTable, earthquake.FtypeEarthquakesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySourceEarthquakes queries the source_earthquakes edge of a Earthquake.
func (c *EarthquakeClient) QuerySourceEarthquakes(e *Earthquake) *SourceEarthquakeQuery {
	query := (&SourceEarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(sourceearthquake.Table, sourceearthquake.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, earthquake.SourceEarthquakesTable, earthquake.SourceEarthquakesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EarthquakeClient) Hooks() []Hook {
	return c.hooks.Earthquake
}

// Interceptors returns the client interceptors.
func (c *EarthquakeClient) Interceptors() []Interceptor {
	return c.inters.Earthquake
}

func (c *EarthquakeClient) mutate(ctx context.Context, m *EarthquakeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EarthquakeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EarthquakeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EarthquakeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Earthquake mutation op: %q", m.Op())
	}
}

// FeatureTypeClient is a client for the FeatureType schema.
type FeatureTypeClient struct {
	config
}

// NewFeatureTypeClient returns a client for the FeatureType from the given config.
func NewFeatureTypeClient(c config) *FeatureTypeClient {
	return &FeatureTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `featuretype.Hooks(f(g(h())))`.
func (c *FeatureTypeClient) Use(hooks ...Hook) {
	c.hooks.FeatureType = append(c.hooks.FeatureType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `featuretype.Intercept(f(g(h())))`.
func (c *FeatureTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeatureType = append(c.inters.FeatureType, interceptors...)
}

// Create returns a builder for creating a FeatureType entity.
func (c *FeatureTypeClient) Create() *FeatureTypeCreate {
	mutation := newFeatureTypeMutation(c.config, OpCreate)
	return &FeatureTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeatureType entities.
func (c *FeatureTypeClient) CreateBulk(builders ...*FeatureTypeCreate) *FeatureTypeCreateBulk {
	return &FeatureTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeatureTypeClient) MapCreateBulk(slice any, setFunc func(*FeatureTypeCreate, int)) *FeatureTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeatureTypeCreateBulk{err: fmt.Errorf("calling to FeatureTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeatureTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeatureTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeatureType.
func (c *FeatureTypeClient) Update() *FeatureTypeUpdate {
	mutation := newFeatureTypeMutation(c.config, OpUpdate)
	return &FeatureTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeatureTypeClient) UpdateOne(ft *FeatureType) *FeatureTypeUpdateOne {
	mutation := newFeatureTypeMutation(c.config, OpUpdateOne, withFeatureType(ft))
	return &FeatureTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeatureTypeClient) UpdateOneID(id int) *FeatureTypeUpdateOne {
	mutation := newFeatureTypeMutation(c.config, OpUpdateOne, withFeatureTypeID(id))
	return &FeatureTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeatureType.
func (c *FeatureTypeClient) Delete() *FeatureTypeDelete {
	mutation := newFeatureTypeMutation(c.config, OpDelete)
	return &FeatureTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeatureTypeClient) DeleteOne(ft *FeatureType) *FeatureTypeDeleteOne {
	return c.DeleteOneID(ft.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeatureTypeClient) DeleteOneID(id int) *FeatureTypeDeleteOne {
	builder := c.Delete().Where(featuretype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeatureTypeDeleteOne{builder}
}

// Query returns a query builder for FeatureType.
func (c *FeatureTypeClient) Query() *FeatureTypeQuery {
	return &FeatureTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeatureType},
		inters: c.Interceptors(),
	}
}

// Get returns a FeatureType entity by its id.
func (c *FeatureTypeClient) Get(ctx context.Context, id int) (*FeatureType, error) {
	return c.Query().Where(featuretype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeatureTypeClient) GetX(ctx context.Context, id int) *FeatureType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFtypeEarthquakes queries the ftype_earthquakes edge of a FeatureType.
func (c *FeatureTypeClient) QueryFtypeEarthquakes(ft *FeatureType) *FtypeEarthquakeQuery {
	query := (&FtypeEarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(featuretype.Table, featuretype.FieldID, id),
			sqlgraph.To(ftypeearthquake.Table, ftypeearthquake.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, featuretype.FtypeEarthquakesTable, featuretype.FtypeEarthquakesColumn),
		)
		fromV = sqlgraph.Neighbors(ft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeatureTypeClient) Hooks() []Hook {
	return c.hooks.FeatureType
}

// Interceptors returns the client interceptors.
func (c *FeatureTypeClient) Interceptors() []Interceptor {
	return c.inters.FeatureType
}

func (c *FeatureTypeClient) mutate(ctx context.Context, m *FeatureTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeatureTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeatureTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeatureTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeatureTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeatureType mutation op: %q", m.Op())
	}
}

// FtypeEarthquakeClient is a client for the FtypeEarthquake schema.
type FtypeEarthquakeClient struct {
	config
}

// NewFtypeEarthquakeClient returns a client for the FtypeEarthquake from the given config.
func NewFtypeEarthquakeClient(c config) *FtypeEarthquakeClient {
	return &FtypeEarthquakeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ftypeearthquake.Hooks(f(g(h())))`.
func (c *FtypeEarthquakeClient) Use(hooks ...Hook) {
	c.hooks.FtypeEarthquake = append(c.hooks.FtypeEarthquake, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ftypeearthquake.Intercept(f(g(h())))`.
func (c *FtypeEarthquakeClient) Intercept(interceptors ...Interceptor) {
	c.inters.FtypeEarthquake = append(c.inters.FtypeEarthquake, interceptors...)
}

// Create returns a builder for creating a FtypeEarthquake entity.
func (c *FtypeEarthquakeClient) Create() *FtypeEarthquakeCreate {
	mutation := newFtypeEarthquakeMutation(c.config, OpCreate)
	return &FtypeEarthquakeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FtypeEarthquake entities.
func (c *FtypeEarthquakeClient) CreateBulk(builders ...*FtypeEarthquakeCreate) *FtypeEarthquakeCreateBulk {
	return &FtypeEarthquakeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FtypeEarthquakeClient) MapCreateBulk(slice any, setFunc func(*FtypeEarthquakeCreate, int)) *FtypeEarthquakeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FtypeEarthquakeCreateBulk{err: fmt.Errorf("calling to FtypeEarthquakeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FtypeEarthquakeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FtypeEarthquakeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FtypeEarthquake.
func (c *FtypeEarthquakeClient) Update() *FtypeEarthquakeUpdate {
	mutation := newFtypeEarthquakeMutation(c.config, OpUpdate)
	return &FtypeEarthquakeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FtypeEarthquakeClient) UpdateOne(fe *FtypeEarthquake) *FtypeEarthquakeUpdateOne {
	mutation := newFtypeEarthquakeMutation(c.config, OpUpdateOne, withFtypeEarthquake(fe))
	return &FtypeEarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FtypeEarthquakeClient) UpdateOneID(id int) *FtypeEarthquakeUpdateOne {
	mutation := newFtypeEarthquakeMutation(c.config, OpUpdateOne, withFtypeEarthquakeID(id))
	return &FtypeEarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FtypeEarthquake.
func (c *FtypeEarthquakeClient) Delete() *FtypeEarthquakeDelete {
	mutation := newFtypeEarthquakeMutation(c.config, OpDelete)
	return &FtypeEarthquakeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FtypeEarthquakeClient) DeleteOne(fe *FtypeEarthquake) *FtypeEarthquakeDeleteOne {
	return c.DeleteOneID(fe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FtypeEarthquakeClient) DeleteOneID(id int) *FtypeEarthquakeDeleteOne {
	builder := c.Delete().Where(ftypeearthquake.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FtypeEarthquakeDeleteOne{builder}
}

// Query returns a query builder for FtypeEarthquake.
func (c *FtypeEarthquakeClient) Query() *FtypeEarthquakeQuery {
	return &FtypeEarthquakeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFtypeEarthquake},
		inters: c.Interceptors(),
	}
}

// Get returns a FtypeEarthquake entity by its id.
func (c *FtypeEarthquakeClient) Get(ctx context.Context, id int) (*FtypeEarthquake, error) {
	return c.Query().Where(ftypeearthquake.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FtypeEarthquakeClient) GetX(ctx context.Context, id int) *FtypeEarthquake {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEarthquake queries the earthquake edge of a FtypeEarthquake.
func (c *FtypeEarthquakeClient) QueryEarthquake(fe *FtypeEarthquake) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ftypeearthquake.Table, ftypeearthquake.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ftypeearthquake.EarthquakeTable, ftypeearthquake.EarthquakeColumn),
		)
		fromV = sqlgraph.Neighbors(fe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeatureType queries the feature_type edge of a FtypeEarthquake.
func (c *FtypeEarthquakeClient) QueryFeatureType(fe *FtypeEarthquake) *FeatureTypeQuery {
	query := (&FeatureTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ftypeearthquake.Table, ftypeearthquake.FieldID, id),
			sqlgraph.To(featuretype.Table, featuretype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ftypeearthquake.FeatureTypeTable, ftypeearthquake.FeatureTypeColumn),
		)
		fromV = sqlgraph.Neighbors(fe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FtypeEarthquakeClient) Hooks() []Hook {
	return c.hooks.FtypeEarthquake
}

// Interceptors returns the client interceptors.
func (c *FtypeEarthquakeClient) Interceptors() []Interceptor {
	return c.inters.FtypeEarthquake
}

func (c *FtypeEarthquakeClient) mutate(ctx context.Context, m *FtypeEarthquakeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FtypeEarthquakeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FtypeEarthquakeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FtypeEarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FtypeEarthquakeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FtypeEarthquake mutation op: %q", m.Op())
	}
}

// GeometryClient is a client for the Geometry schema.
type GeometryClient struct {
	config
}

// NewGeometryClient returns a client for the Geometry from the given config.
func NewGeometryClient(c config) *GeometryClient {
	return &GeometryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `geometry.Hooks(f(g(h())))`.
func (c *GeometryClient) Use(hooks ...Hook) {
	c.hooks.Geometry = append(c.hooks.Geometry, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `geometry.Intercept(f(g(h())))`.
func (c *GeometryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Geometry = append(c.inters.Geometry, interceptors...)
}

// Create returns a builder for creating a Geometry entity.
func (c *GeometryClient) Create() *GeometryCreate {
	mutation := newGeometryMutation(c.config, OpCreate)
	return &GeometryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Geometry entities.
func (c *GeometryClient) CreateBulk(builders ...*GeometryCreate) *GeometryCreateBulk {
	return &GeometryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GeometryClient) MapCreateBulk(slice any, setFunc func(*GeometryCreate, int)) *GeometryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GeometryCreateBulk{err: fmt.Errorf("calling to GeometryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GeometryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GeometryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Geometry.
func (c *GeometryClient) Update() *GeometryUpdate {
	mutation := newGeometryMutation(c.config, OpUpdate)
	return &GeometryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GeometryClient) UpdateOne(ge *Geometry) *GeometryUpdateOne {
	mutation := newGeometryMutation(c.config, OpUpdateOne, withGeometry(ge))
	return &GeometryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GeometryClient) UpdateOneID(id int) *GeometryUpdateOne {
	mutation := newGeometryMutation(c.config, OpUpdateOne, withGeometryID(id))
	return &GeometryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Geometry.
func (c *GeometryClient) Delete() *GeometryDelete {
	mutation := newGeometryMutation(c.config, OpDelete)
	return &GeometryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GeometryClient) DeleteOne(ge *Geometry) *GeometryDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GeometryClient) DeleteOneID(id int) *GeometryDeleteOne {
	builder := c.Delete().Where(geometry.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GeometryDeleteOne{builder}
}

// Query returns a query builder for Geometry.
func (c *GeometryClient) Query() *GeometryQuery {
	return &GeometryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGeometry},
		inters: c.Interceptors(),
	}
}

// Get returns a Geometry entity by its id.
func (c *GeometryClient) Get(ctx context.Context, id int) (*Geometry, error) {
	return c.Query().Where(geometry.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GeometryClient) GetX(ctx context.Context, id int) *Geometry {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEarthquakes queries the earthquakes edge of a Geometry.
func (c *GeometryClient) QueryEarthquakes(ge *Geometry) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(geometry.Table, geometry.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, geometry.EarthquakesTable, geometry.EarthquakesColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocation queries the location edge of a Geometry.
func (c *GeometryClient) QueryLocation(ge *Geometry) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(geometry.Table, geometry.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, geometry.LocationTable, geometry.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GeometryClient) Hooks() []Hook {
	return c.hooks.Geometry
}

// Interceptors returns the client interceptors.
func (c *GeometryClient) Interceptors() []Interceptor {
	return c.inters.Geometry
}

func (c *GeometryClient) mutate(ctx context.Context, m *GeometryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GeometryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GeometryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GeometryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GeometryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Geometry mutation op: %q", m.Op())
	}
}

// LocationClient is a client for the Location schema.
type LocationClient struct {
	config
}

// NewLocationClient returns a client for the Location from the given config.
func NewLocationClient(c config) *LocationClient {
	return &LocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `location.Hooks(f(g(h())))`.
func (c *LocationClient) Use(hooks ...Hook) {
	c.hooks.Location = append(c.hooks.Location, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `location.Intercept(f(g(h())))`.
func (c *LocationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Location = append(c.inters.Location, interceptors...)
}

// Create returns a builder for creating a Location entity.
func (c *LocationClient) Create() *LocationCreate {
	mutation := newLocationMutation(c.config, OpCreate)
	return &LocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Location entities.
func (c *LocationClient) CreateBulk(builders ...*LocationCreate) *LocationCreateBulk {
	return &LocationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LocationClient) MapCreateBulk(slice any, setFunc func(*LocationCreate, int)) *LocationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LocationCreateBulk{err: fmt.Errorf("calling to LocationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LocationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Location.
func (c *LocationClient) Update() *LocationUpdate {
	mutation := newLocationMutation(c.config, OpUpdate)
	return &LocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocationClient) UpdateOne(l *Location) *LocationUpdateOne {
	mutation := newLocationMutation(c.config, OpUpdateOne, withLocation(l))
	return &LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocationClient) UpdateOneID(id int) *LocationUpdateOne {
	mutation := newLocationMutation(c.config, OpUpdateOne, withLocationID(id))
	return &LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Location.
func (c *LocationClient) Delete() *LocationDelete {
	mutation := newLocationMutation(c.config, OpDelete)
	return &LocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LocationClient) DeleteOne(l *Location) *LocationDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LocationClient) DeleteOneID(id int) *LocationDeleteOne {
	builder := c.Delete().Where(location.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocationDeleteOne{builder}
}

// Query returns a query builder for Location.
func (c *LocationClient) Query() *LocationQuery {
	return &LocationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLocation},
		inters: c.Interceptors(),
	}
}

// Get returns a Location entity by its id.
func (c *LocationClient) Get(ctx context.Context, id int) (*Location, error) {
	return c.Query().Where(location.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocationClient) GetX(ctx context.Context, id int) *Location {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGeometries queries the geometries edge of a Location.
func (c *LocationClient) QueryGeometries(l *Location) *GeometryQuery {
	query := (&GeometryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(geometry.Table, geometry.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, location.GeometriesTable, location.GeometriesColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LocationClient) Hooks() []Hook {
	return c.hooks.Location
}

// Interceptors returns the client interceptors.
func (c *LocationClient) Interceptors() []Interceptor {
	return c.inters.Location
}

func (c *LocationClient) mutate(ctx context.Context, m *LocationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LocationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LocationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LocationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Location mutation op: %q", m.Op())
	}
}

// PasswordResetRequestClient is a client for the PasswordResetRequest schema.
type PasswordResetRequestClient struct {
	config
}

// NewPasswordResetRequestClient returns a client for the PasswordResetRequest from the given config.
func NewPasswordResetRequestClient(c config) *PasswordResetRequestClient {
	return &PasswordResetRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `passwordresetrequest.Hooks(f(g(h())))`.
func (c *PasswordResetRequestClient) Use(hooks ...Hook) {
	c.hooks.PasswordResetRequest = append(c.hooks.PasswordResetRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `passwordresetrequest.Intercept(f(g(h())))`.
func (c *PasswordResetRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.PasswordResetRequest = append(c.inters.PasswordResetRequest, interceptors...)
}

// Create returns a builder for creating a PasswordResetRequest entity.
func (c *PasswordResetRequestClient) Create() *PasswordResetRequestCreate {
	mutation := newPasswordResetRequestMutation(c.config, OpCreate)
	return &PasswordResetRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PasswordResetRequest entities.
func (c *PasswordResetRequestClient) CreateBulk(builders ...*PasswordResetRequestCreate) *PasswordResetRequestCreateBulk {
	return &PasswordResetRequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PasswordResetRequestClient) MapCreateBulk(slice any, setFunc func(*PasswordResetRequestCreate, int)) *PasswordResetRequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PasswordResetRequestCreateBulk{err: fmt.Errorf("calling to PasswordResetRequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PasswordResetRequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PasswordResetRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PasswordResetRequest.
func (c *PasswordResetRequestClient) Update() *PasswordResetRequestUpdate {
	mutation := newPasswordResetRequestMutation(c.config, OpUpdate)
	return &PasswordResetRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PasswordResetRequestClient) UpdateOne(prr *PasswordResetRequest) *PasswordResetRequestUpdateOne {
	mutation := newPasswordResetRequestMutation(c.config, OpUpdateOne, withPasswordResetRequest(prr))
	return &PasswordResetRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PasswordResetRequestClient) UpdateOneID(id int) *PasswordResetRequestUpdateOne {
	mutation := newPasswordResetRequestMutation(c.config, OpUpdateOne, withPasswordResetRequestID(id))
	return &PasswordResetRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PasswordResetRequest.
func (c *PasswordResetRequestClient) Delete() *PasswordResetRequestDelete {
	mutation := newPasswordResetRequestMutation(c.config, OpDelete)
	return &PasswordResetRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PasswordResetRequestClient) DeleteOne(prr *PasswordResetRequest) *PasswordResetRequestDeleteOne {
	return c.DeleteOneID(prr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PasswordResetRequestClient) DeleteOneID(id int) *PasswordResetRequestDeleteOne {
	builder := c.Delete().Where(passwordresetrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PasswordResetRequestDeleteOne{builder}
}

// Query returns a query builder for PasswordResetRequest.
func (c *PasswordResetRequestClient) Query() *PasswordResetRequestQuery {
	return &PasswordResetRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePasswordResetRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a PasswordResetRequest entity by its id.
func (c *PasswordResetRequestClient) Get(ctx context.Context, id int) (*PasswordResetRequest, error) {
	return c.Query().Where(passwordresetrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PasswordResetRequestClient) GetX(ctx context.Context, id int) *PasswordResetRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a PasswordResetRequest.
func (c *PasswordResetRequestClient) QueryUser(prr *PasswordResetRequest) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := prr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(passwordresetrequest.Table, passwordresetrequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, passwordresetrequest.UserTable, passwordresetrequest.UserColumn),
		)
		fromV = sqlgraph.Neighbors(prr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PasswordResetRequestClient) Hooks() []Hook {
	return c.hooks.PasswordResetRequest
}

// Interceptors returns the client interceptors.
func (c *PasswordResetRequestClient) Interceptors() []Interceptor {
	return c.inters.PasswordResetRequest
}

func (c *PasswordResetRequestClient) mutate(ctx context.Context, m *PasswordResetRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PasswordResetRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PasswordResetRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PasswordResetRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PasswordResetRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PasswordResetRequest mutation op: %q", m.Op())
	}
}

// ReportClient is a client for the Report schema.
type ReportClient struct {
	config
}

// NewReportClient returns a client for the Report from the given config.
func NewReportClient(c config) *ReportClient {
	return &ReportClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `report.Hooks(f(g(h())))`.
func (c *ReportClient) Use(hooks ...Hook) {
	c.hooks.Report = append(c.hooks.Report, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `report.Intercept(f(g(h())))`.
func (c *ReportClient) Intercept(interceptors ...Interceptor) {
	c.inters.Report = append(c.inters.Report, interceptors...)
}

// Create returns a builder for creating a Report entity.
func (c *ReportClient) Create() *ReportCreate {
	mutation := newReportMutation(c.config, OpCreate)
	return &ReportCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Report entities.
func (c *ReportClient) CreateBulk(builders ...*ReportCreate) *ReportCreateBulk {
	return &ReportCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReportClient) MapCreateBulk(slice any, setFunc func(*ReportCreate, int)) *ReportCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReportCreateBulk{err: fmt.Errorf("calling to ReportClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReportCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReportCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Report.
func (c *ReportClient) Update() *ReportUpdate {
	mutation := newReportMutation(c.config, OpUpdate)
	return &ReportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReportClient) UpdateOne(r *Report) *ReportUpdateOne {
	mutation := newReportMutation(c.config, OpUpdateOne, withReport(r))
	return &ReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReportClient) UpdateOneID(id int) *ReportUpdateOne {
	mutation := newReportMutation(c.config, OpUpdateOne, withReportID(id))
	return &ReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Report.
func (c *ReportClient) Delete() *ReportDelete {
	mutation := newReportMutation(c.config, OpDelete)
	return &ReportDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReportClient) DeleteOne(r *Report) *ReportDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReportClient) DeleteOneID(id int) *ReportDeleteOne {
	builder := c.Delete().Where(report.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReportDeleteOne{builder}
}

// Query returns a query builder for Report.
func (c *ReportClient) Query() *ReportQuery {
	return &ReportQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReport},
		inters: c.Interceptors(),
	}
}

// Get returns a Report entity by its id.
func (c *ReportClient) Get(ctx context.Context, id int) (*Report, error) {
	return c.Query().Where(report.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReportClient) GetX(ctx context.Context, id int) *Report {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEarthquakes queries the earthquakes edge of a Report.
func (c *ReportClient) QueryEarthquakes(r *Report) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(report.Table, report.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, report.EarthquakesTable, report.EarthquakesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReportClient) Hooks() []Hook {
	return c.hooks.Report
}

// Interceptors returns the client interceptors.
func (c *ReportClient) Interceptors() []Interceptor {
	return c.inters.Report
}

func (c *ReportClient) mutate(ctx context.Context, m *ReportMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReportCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReportUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReportDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Report mutation op: %q", m.Op())
	}
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `session.Intercept(f(g(h())))`.
func (c *SessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Session = append(c.inters.Session, interceptors...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SessionClient) MapCreateBulk(slice any, setFunc func(*SessionCreate, int)) *SessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SessionCreateBulk{err: fmt.Errorf("calling to SessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id int) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id int) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSession},
		inters: c.Interceptors(),
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id int) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id int) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Session.
func (c *SessionClient) QueryUser(s *Session) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, session.UserTable, session.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// Interceptors returns the client interceptors.
func (c *SessionClient) Interceptors() []Interceptor {
	return c.inters.Session
}

func (c *SessionClient) mutate(ctx context.Context, m *SessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Session mutation op: %q", m.Op())
	}
}

// SourceClient is a client for the Source schema.
type SourceClient struct {
	config
}

// NewSourceClient returns a client for the Source from the given config.
func NewSourceClient(c config) *SourceClient {
	return &SourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `source.Hooks(f(g(h())))`.
func (c *SourceClient) Use(hooks ...Hook) {
	c.hooks.Source = append(c.hooks.Source, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `source.Intercept(f(g(h())))`.
func (c *SourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Source = append(c.inters.Source, interceptors...)
}

// Create returns a builder for creating a Source entity.
func (c *SourceClient) Create() *SourceCreate {
	mutation := newSourceMutation(c.config, OpCreate)
	return &SourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Source entities.
func (c *SourceClient) CreateBulk(builders ...*SourceCreate) *SourceCreateBulk {
	return &SourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SourceClient) MapCreateBulk(slice any, setFunc func(*SourceCreate, int)) *SourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SourceCreateBulk{err: fmt.Errorf("calling to SourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Source.
func (c *SourceClient) Update() *SourceUpdate {
	mutation := newSourceMutation(c.config, OpUpdate)
	return &SourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SourceClient) UpdateOne(s *Source) *SourceUpdateOne {
	mutation := newSourceMutation(c.config, OpUpdateOne, withSource(s))
	return &SourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SourceClient) UpdateOneID(id int) *SourceUpdateOne {
	mutation := newSourceMutation(c.config, OpUpdateOne, withSourceID(id))
	return &SourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Source.
func (c *SourceClient) Delete() *SourceDelete {
	mutation := newSourceMutation(c.config, OpDelete)
	return &SourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SourceClient) DeleteOne(s *Source) *SourceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SourceClient) DeleteOneID(id int) *SourceDeleteOne {
	builder := c.Delete().Where(source.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SourceDeleteOne{builder}
}

// Query returns a query builder for Source.
func (c *SourceClient) Query() *SourceQuery {
	return &SourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSource},
		inters: c.Interceptors(),
	}
}

// Get returns a Source entity by its id.
func (c *SourceClient) Get(ctx context.Context, id int) (*Source, error) {
	return c.Query().Where(source.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SourceClient) GetX(ctx context.Context, id int) *Source {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySourceEarthquakes queries the source_earthquakes edge of a Source.
func (c *SourceClient) QuerySourceEarthquakes(s *Source) *SourceEarthquakeQuery {
	query := (&SourceEarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(source.Table, source.FieldID, id),
			sqlgraph.To(sourceearthquake.Table, sourceearthquake.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, source.SourceEarthquakesTable, source.SourceEarthquakesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SourceClient) Hooks() []Hook {
	return c.hooks.Source
}

// Interceptors returns the client interceptors.
func (c *SourceClient) Interceptors() []Interceptor {
	return c.inters.Source
}

func (c *SourceClient) mutate(ctx context.Context, m *SourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Source mutation op: %q", m.Op())
	}
}

// SourceEarthquakeClient is a client for the SourceEarthquake schema.
type SourceEarthquakeClient struct {
	config
}

// NewSourceEarthquakeClient returns a client for the SourceEarthquake from the given config.
func NewSourceEarthquakeClient(c config) *SourceEarthquakeClient {
	return &SourceEarthquakeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sourceearthquake.Hooks(f(g(h())))`.
func (c *SourceEarthquakeClient) Use(hooks ...Hook) {
	c.hooks.SourceEarthquake = append(c.hooks.SourceEarthquake, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sourceearthquake.Intercept(f(g(h())))`.
func (c *SourceEarthquakeClient) Intercept(interceptors ...Interceptor) {
	c.inters.SourceEarthquake = append(c.inters.SourceEarthquake, interceptors...)
}

// Create returns a builder for creating a SourceEarthquake entity.
func (c *SourceEarthquakeClient) Create() *SourceEarthquakeCreate {
	mutation := newSourceEarthquakeMutation(c.config, OpCreate)
	return &SourceEarthquakeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SourceEarthquake entities.
func (c *SourceEarthquakeClient) CreateBulk(builders ...*SourceEarthquakeCreate) *SourceEarthquakeCreateBulk {
	return &SourceEarthquakeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SourceEarthquakeClient) MapCreateBulk(slice any, setFunc func(*SourceEarthquakeCreate, int)) *SourceEarthquakeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SourceEarthquakeCreateBulk{err: fmt.Errorf("calling to SourceEarthquakeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SourceEarthquakeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SourceEarthquakeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SourceEarthquake.
func (c *SourceEarthquakeClient) Update() *SourceEarthquakeUpdate {
	mutation := newSourceEarthquakeMutation(c.config, OpUpdate)
	return &SourceEarthquakeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SourceEarthquakeClient) UpdateOne(se *SourceEarthquake) *SourceEarthquakeUpdateOne {
	mutation := newSourceEarthquakeMutation(c.config, OpUpdateOne, withSourceEarthquake(se))
	return &SourceEarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SourceEarthquakeClient) UpdateOneID(id int) *SourceEarthquakeUpdateOne {
	mutation := newSourceEarthquakeMutation(c.config, OpUpdateOne, withSourceEarthquakeID(id))
	return &SourceEarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SourceEarthquake.
func (c *SourceEarthquakeClient) Delete() *SourceEarthquakeDelete {
	mutation := newSourceEarthquakeMutation(c.config, OpDelete)
	return &SourceEarthquakeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SourceEarthquakeClient) DeleteOne(se *SourceEarthquake) *SourceEarthquakeDeleteOne {
	return c.DeleteOneID(se.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SourceEarthquakeClient) DeleteOneID(id int) *SourceEarthquakeDeleteOne {
	builder := c.Delete().Where(sourceearthquake.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SourceEarthquakeDeleteOne{builder}
}

// Query returns a query builder for SourceEarthquake.
func (c *SourceEarthquakeClient) Query() *SourceEarthquakeQuery {
	return &SourceEarthquakeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSourceEarthquake},
		inters: c.Interceptors(),
	}
}

// Get returns a SourceEarthquake entity by its id.
func (c *SourceEarthquakeClient) Get(ctx context.Context, id int) (*SourceEarthquake, error) {
	return c.Query().Where(sourceearthquake.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SourceEarthquakeClient) GetX(ctx context.Context, id int) *SourceEarthquake {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEarthquake queries the earthquake edge of a SourceEarthquake.
func (c *SourceEarthquakeClient) QueryEarthquake(se *SourceEarthquake) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sourceearthquake.Table, sourceearthquake.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sourceearthquake.EarthquakeTable, sourceearthquake.EarthquakeColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySource queries the source edge of a SourceEarthquake.
func (c *SourceEarthquakeClient) QuerySource(se *SourceEarthquake) *SourceQuery {
	query := (&SourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sourceearthquake.Table, sourceearthquake.FieldID, id),
			sqlgraph.To(source.Table, source.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sourceearthquake.SourceTable, sourceearthquake.SourceColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SourceEarthquakeClient) Hooks() []Hook {
	return c.hooks.SourceEarthquake
}

// Interceptors returns the client interceptors.
func (c *SourceEarthquakeClient) Interceptors() []Interceptor {
	return c.inters.SourceEarthquake
}

func (c *SourceEarthquakeClient) mutate(ctx context.Context, m *SourceEarthquakeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SourceEarthquakeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SourceEarthquakeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SourceEarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SourceEarthquakeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SourceEarthquake mutation op: %q", m.Op())
	}
}

// TokenClient is a client for the Token schema.
type TokenClient struct {
	config
}

// NewTokenClient returns a client for the Token from the given config.
func NewTokenClient(c config) *TokenClient {
	return &TokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `token.Hooks(f(g(h())))`.
func (c *TokenClient) Use(hooks ...Hook) {
	c.hooks.Token = append(c.hooks.Token, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `token.Intercept(f(g(h())))`.
func (c *TokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.Token = append(c.inters.Token, interceptors...)
}

// Create returns a builder for creating a Token entity.
func (c *TokenClient) Create() *TokenCreate {
	mutation := newTokenMutation(c.config, OpCreate)
	return &TokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Token entities.
func (c *TokenClient) CreateBulk(builders ...*TokenCreate) *TokenCreateBulk {
	return &TokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TokenClient) MapCreateBulk(slice any, setFunc func(*TokenCreate, int)) *TokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TokenCreateBulk{err: fmt.Errorf("calling to TokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Token.
func (c *TokenClient) Update() *TokenUpdate {
	mutation := newTokenMutation(c.config, OpUpdate)
	return &TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TokenClient) UpdateOne(t *Token) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withToken(t))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TokenClient) UpdateOneID(id int) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withTokenID(id))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Token.
func (c *TokenClient) Delete() *TokenDelete {
	mutation := newTokenMutation(c.config, OpDelete)
	return &TokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TokenClient) DeleteOne(t *Token) *TokenDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TokenClient) DeleteOneID(id int) *TokenDeleteOne {
	builder := c.Delete().Where(token.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TokenDeleteOne{builder}
}

// Query returns a query builder for Token.
func (c *TokenClient) Query() *TokenQuery {
	return &TokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeToken},
		inters: c.Interceptors(),
	}
}

// Get returns a Token entity by its id.
func (c *TokenClient) Get(ctx context.Context, id int) (*Token, error) {
	return c.Query().Where(token.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TokenClient) GetX(ctx context.Context, id int) *Token {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Token.
func (c *TokenClient) QueryUser(t *Token) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(token.Table, token.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, token.UserTable, token.UserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TokenClient) Hooks() []Hook {
	return c.hooks.Token
}

// Interceptors returns the client interceptors.
func (c *TokenClient) Interceptors() []Interceptor {
	return c.inters.Token
}

func (c *TokenClient) mutate(ctx context.Context, m *TokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Token mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a User.
func (c *UserClient) QuerySession(u *User) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionTable, user.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPasswordResetRequest queries the password_reset_request edge of a User.
func (c *UserClient) QueryPasswordResetRequest(u *User) *PasswordResetRequestQuery {
	query := (&PasswordResetRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(passwordresetrequest.Table, passwordresetrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PasswordResetRequestTable, user.PasswordResetRequestColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCredentials queries the credentials edge of a User.
func (c *UserClient) QueryCredentials(u *User) *CredentialsQuery {
	query := (&CredentialsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(credentials.Table, credentials.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CredentialsTable, user.CredentialsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToken queries the token edge of a User.
func (c *UserClient) QueryToken(u *User) *TokenQuery {
	query := (&TokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TokenTable, user.TokenColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Apireq, Credentials, Earthquake, FeatureType, FtypeEarthquake, Geometry,
		Location, PasswordResetRequest, Report, Session, Source, SourceEarthquake,
		Token, User []ent.Hook
	}
	inters struct {
		Apireq, Credentials, Earthquake, FeatureType, FtypeEarthquake, Geometry,
		Location, PasswordResetRequest, Report, Session, Source, SourceEarthquake,
		Token, User []ent.Interceptor
	}
)
