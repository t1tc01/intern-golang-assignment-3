// Code generated by ent, DO NOT EDIT.

package token

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.com/hedwig-phan/assignment-3/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldUserID, v))
}

// TokenValue applies equality check predicate on the "token_value" field. It's identical to TokenValueEQ.
func TokenValue(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldTokenValue, v))
}

// ExpirationTime applies equality check predicate on the "expiration_time" field. It's identical to ExpirationTimeEQ.
func ExpirationTime(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldExpirationTime, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Token {
	return predicate.Token(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Token {
	return predicate.Token(sql.FieldNotNull(FieldUserID))
}

// TokenValueEQ applies the EQ predicate on the "token_value" field.
func TokenValueEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldTokenValue, v))
}

// TokenValueNEQ applies the NEQ predicate on the "token_value" field.
func TokenValueNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldTokenValue, v))
}

// TokenValueIn applies the In predicate on the "token_value" field.
func TokenValueIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldTokenValue, vs...))
}

// TokenValueNotIn applies the NotIn predicate on the "token_value" field.
func TokenValueNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldTokenValue, vs...))
}

// TokenValueGT applies the GT predicate on the "token_value" field.
func TokenValueGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldTokenValue, v))
}

// TokenValueGTE applies the GTE predicate on the "token_value" field.
func TokenValueGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldTokenValue, v))
}

// TokenValueLT applies the LT predicate on the "token_value" field.
func TokenValueLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldTokenValue, v))
}

// TokenValueLTE applies the LTE predicate on the "token_value" field.
func TokenValueLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldTokenValue, v))
}

// TokenValueContains applies the Contains predicate on the "token_value" field.
func TokenValueContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldTokenValue, v))
}

// TokenValueHasPrefix applies the HasPrefix predicate on the "token_value" field.
func TokenValueHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldTokenValue, v))
}

// TokenValueHasSuffix applies the HasSuffix predicate on the "token_value" field.
func TokenValueHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldTokenValue, v))
}

// TokenValueEqualFold applies the EqualFold predicate on the "token_value" field.
func TokenValueEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldTokenValue, v))
}

// TokenValueContainsFold applies the ContainsFold predicate on the "token_value" field.
func TokenValueContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldTokenValue, v))
}

// ExpirationTimeEQ applies the EQ predicate on the "expiration_time" field.
func ExpirationTimeEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldExpirationTime, v))
}

// ExpirationTimeNEQ applies the NEQ predicate on the "expiration_time" field.
func ExpirationTimeNEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldExpirationTime, v))
}

// ExpirationTimeIn applies the In predicate on the "expiration_time" field.
func ExpirationTimeIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldExpirationTime, vs...))
}

// ExpirationTimeNotIn applies the NotIn predicate on the "expiration_time" field.
func ExpirationTimeNotIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldExpirationTime, vs...))
}

// ExpirationTimeGT applies the GT predicate on the "expiration_time" field.
func ExpirationTimeGT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldExpirationTime, v))
}

// ExpirationTimeGTE applies the GTE predicate on the "expiration_time" field.
func ExpirationTimeGTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldExpirationTime, v))
}

// ExpirationTimeLT applies the LT predicate on the "expiration_time" field.
func ExpirationTimeLT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldExpirationTime, v))
}

// ExpirationTimeLTE applies the LTE predicate on the "expiration_time" field.
func ExpirationTimeLTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldExpirationTime, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Token) predicate.Token {
	return predicate.Token(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Token) predicate.Token {
	return predicate.Token(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Token) predicate.Token {
	return predicate.Token(sql.NotPredicates(p))
}
