// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/hedwig-phan/assignment-3/ent/earthquake"
	"gitlab.com/hedwig-phan/assignment-3/ent/source"
	"gitlab.com/hedwig-phan/assignment-3/ent/sourceearthquake"
)

// SourceEarthquakeCreate is the builder for creating a SourceEarthquake entity.
type SourceEarthquakeCreate struct {
	config
	mutation *SourceEarthquakeMutation
	hooks    []Hook
}

// SetSID sets the "s_id" field.
func (sec *SourceEarthquakeCreate) SetSID(i int) *SourceEarthquakeCreate {
	sec.mutation.SetSID(i)
	return sec
}

// SetNillableSID sets the "s_id" field if the given value is not nil.
func (sec *SourceEarthquakeCreate) SetNillableSID(i *int) *SourceEarthquakeCreate {
	if i != nil {
		sec.SetSID(*i)
	}
	return sec
}

// SetEqID sets the "eq_id" field.
func (sec *SourceEarthquakeCreate) SetEqID(i int) *SourceEarthquakeCreate {
	sec.mutation.SetEqID(i)
	return sec
}

// SetNillableEqID sets the "eq_id" field if the given value is not nil.
func (sec *SourceEarthquakeCreate) SetNillableEqID(i *int) *SourceEarthquakeCreate {
	if i != nil {
		sec.SetEqID(*i)
	}
	return sec
}

// SetCreatedAt sets the "created_at" field.
func (sec *SourceEarthquakeCreate) SetCreatedAt(t time.Time) *SourceEarthquakeCreate {
	sec.mutation.SetCreatedAt(t)
	return sec
}

// SetUpdatedAt sets the "updated_at" field.
func (sec *SourceEarthquakeCreate) SetUpdatedAt(t time.Time) *SourceEarthquakeCreate {
	sec.mutation.SetUpdatedAt(t)
	return sec
}

// SetDeletedAt sets the "deleted_at" field.
func (sec *SourceEarthquakeCreate) SetDeletedAt(t time.Time) *SourceEarthquakeCreate {
	sec.mutation.SetDeletedAt(t)
	return sec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sec *SourceEarthquakeCreate) SetNillableDeletedAt(t *time.Time) *SourceEarthquakeCreate {
	if t != nil {
		sec.SetDeletedAt(*t)
	}
	return sec
}

// SetID sets the "id" field.
func (sec *SourceEarthquakeCreate) SetID(i int) *SourceEarthquakeCreate {
	sec.mutation.SetID(i)
	return sec
}

// SetEarthquakeID sets the "earthquake" edge to the Earthquake entity by ID.
func (sec *SourceEarthquakeCreate) SetEarthquakeID(id int) *SourceEarthquakeCreate {
	sec.mutation.SetEarthquakeID(id)
	return sec
}

// SetNillableEarthquakeID sets the "earthquake" edge to the Earthquake entity by ID if the given value is not nil.
func (sec *SourceEarthquakeCreate) SetNillableEarthquakeID(id *int) *SourceEarthquakeCreate {
	if id != nil {
		sec = sec.SetEarthquakeID(*id)
	}
	return sec
}

// SetEarthquake sets the "earthquake" edge to the Earthquake entity.
func (sec *SourceEarthquakeCreate) SetEarthquake(e *Earthquake) *SourceEarthquakeCreate {
	return sec.SetEarthquakeID(e.ID)
}

// SetSourceID sets the "source" edge to the Source entity by ID.
func (sec *SourceEarthquakeCreate) SetSourceID(id int) *SourceEarthquakeCreate {
	sec.mutation.SetSourceID(id)
	return sec
}

// SetNillableSourceID sets the "source" edge to the Source entity by ID if the given value is not nil.
func (sec *SourceEarthquakeCreate) SetNillableSourceID(id *int) *SourceEarthquakeCreate {
	if id != nil {
		sec = sec.SetSourceID(*id)
	}
	return sec
}

// SetSource sets the "source" edge to the Source entity.
func (sec *SourceEarthquakeCreate) SetSource(s *Source) *SourceEarthquakeCreate {
	return sec.SetSourceID(s.ID)
}

// Mutation returns the SourceEarthquakeMutation object of the builder.
func (sec *SourceEarthquakeCreate) Mutation() *SourceEarthquakeMutation {
	return sec.mutation
}

// Save creates the SourceEarthquake in the database.
func (sec *SourceEarthquakeCreate) Save(ctx context.Context) (*SourceEarthquake, error) {
	return withHooks(ctx, sec.sqlSave, sec.mutation, sec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sec *SourceEarthquakeCreate) SaveX(ctx context.Context) *SourceEarthquake {
	v, err := sec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sec *SourceEarthquakeCreate) Exec(ctx context.Context) error {
	_, err := sec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sec *SourceEarthquakeCreate) ExecX(ctx context.Context) {
	if err := sec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sec *SourceEarthquakeCreate) check() error {
	if _, ok := sec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SourceEarthquake.created_at"`)}
	}
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SourceEarthquake.updated_at"`)}
	}
	return nil
}

func (sec *SourceEarthquakeCreate) sqlSave(ctx context.Context) (*SourceEarthquake, error) {
	if err := sec.check(); err != nil {
		return nil, err
	}
	_node, _spec := sec.createSpec()
	if err := sqlgraph.CreateNode(ctx, sec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sec.mutation.id = &_node.ID
	sec.mutation.done = true
	return _node, nil
}

func (sec *SourceEarthquakeCreate) createSpec() (*SourceEarthquake, *sqlgraph.CreateSpec) {
	var (
		_node = &SourceEarthquake{config: sec.config}
		_spec = sqlgraph.NewCreateSpec(sourceearthquake.Table, sqlgraph.NewFieldSpec(sourceearthquake.FieldID, field.TypeInt))
	)
	if id, ok := sec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sec.mutation.CreatedAt(); ok {
		_spec.SetField(sourceearthquake.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sec.mutation.UpdatedAt(); ok {
		_spec.SetField(sourceearthquake.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sec.mutation.DeletedAt(); ok {
		_spec.SetField(sourceearthquake.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := sec.mutation.EarthquakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sourceearthquake.EarthquakeTable,
			Columns: []string{sourceearthquake.EarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EqID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sec.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sourceearthquake.SourceTable,
			Columns: []string{sourceearthquake.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(source.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SourceEarthquakeCreateBulk is the builder for creating many SourceEarthquake entities in bulk.
type SourceEarthquakeCreateBulk struct {
	config
	err      error
	builders []*SourceEarthquakeCreate
}

// Save creates the SourceEarthquake entities in the database.
func (secb *SourceEarthquakeCreateBulk) Save(ctx context.Context) ([]*SourceEarthquake, error) {
	if secb.err != nil {
		return nil, secb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(secb.builders))
	nodes := make([]*SourceEarthquake, len(secb.builders))
	mutators := make([]Mutator, len(secb.builders))
	for i := range secb.builders {
		func(i int, root context.Context) {
			builder := secb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SourceEarthquakeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, secb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, secb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, secb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (secb *SourceEarthquakeCreateBulk) SaveX(ctx context.Context) []*SourceEarthquake {
	v, err := secb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (secb *SourceEarthquakeCreateBulk) Exec(ctx context.Context) error {
	_, err := secb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (secb *SourceEarthquakeCreateBulk) ExecX(ctx context.Context) {
	if err := secb.Exec(ctx); err != nil {
		panic(err)
	}
}
