// Code generated by ent, DO NOT EDIT.

package earthquake

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.com/hedwig-phan/assignment-3/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldID, id))
}

// GeoID applies equality check predicate on the "geo_id" field. It's identical to GeoIDEQ.
func GeoID(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldGeoID, v))
}

// ReportID applies equality check predicate on the "report_id" field. It's identical to ReportIDEQ.
func ReportID(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldReportID, v))
}

// Mag applies equality check predicate on the "mag" field. It's identical to MagEQ.
func Mag(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldMag, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldUpdatedTime, v))
}

// Tz applies equality check predicate on the "tz" field. It's identical to TzEQ.
func Tz(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldTz, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldURL, v))
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDetail, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldStatus, v))
}

// Tsunami applies equality check predicate on the "tsunami" field. It's identical to TsunamiEQ.
func Tsunami(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldTsunami, v))
}

// Sig applies equality check predicate on the "sig" field. It's identical to SigEQ.
func Sig(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldSig, v))
}

// Net applies equality check predicate on the "net" field. It's identical to NetEQ.
func Net(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldNet, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldCode, v))
}

// Nst applies equality check predicate on the "nst" field. It's identical to NstEQ.
func Nst(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldNst, v))
}

// Dmin applies equality check predicate on the "dmin" field. It's identical to DminEQ.
func Dmin(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDmin, v))
}

// Rms applies equality check predicate on the "rms" field. It's identical to RmsEQ.
func Rms(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldRms, v))
}

// Gap applies equality check predicate on the "gap" field. It's identical to GapEQ.
func Gap(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldGap, v))
}

// MagType applies equality check predicate on the "mag_type" field. It's identical to MagTypeEQ.
func MagType(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldMagType, v))
}

// EqType applies equality check predicate on the "eq_type" field. It's identical to EqTypeEQ.
func EqType(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldEqType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDeletedAt, v))
}

// GeoIDEQ applies the EQ predicate on the "geo_id" field.
func GeoIDEQ(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldGeoID, v))
}

// GeoIDNEQ applies the NEQ predicate on the "geo_id" field.
func GeoIDNEQ(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldGeoID, v))
}

// GeoIDIn applies the In predicate on the "geo_id" field.
func GeoIDIn(vs ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldGeoID, vs...))
}

// GeoIDNotIn applies the NotIn predicate on the "geo_id" field.
func GeoIDNotIn(vs ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldGeoID, vs...))
}

// GeoIDIsNil applies the IsNil predicate on the "geo_id" field.
func GeoIDIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldGeoID))
}

// GeoIDNotNil applies the NotNil predicate on the "geo_id" field.
func GeoIDNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldGeoID))
}

// ReportIDEQ applies the EQ predicate on the "report_id" field.
func ReportIDEQ(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldReportID, v))
}

// ReportIDNEQ applies the NEQ predicate on the "report_id" field.
func ReportIDNEQ(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldReportID, v))
}

// ReportIDIn applies the In predicate on the "report_id" field.
func ReportIDIn(vs ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldReportID, vs...))
}

// ReportIDNotIn applies the NotIn predicate on the "report_id" field.
func ReportIDNotIn(vs ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldReportID, vs...))
}

// ReportIDIsNil applies the IsNil predicate on the "report_id" field.
func ReportIDIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldReportID))
}

// ReportIDNotNil applies the NotNil predicate on the "report_id" field.
func ReportIDNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldReportID))
}

// MagEQ applies the EQ predicate on the "mag" field.
func MagEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldMag, v))
}

// MagNEQ applies the NEQ predicate on the "mag" field.
func MagNEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldMag, v))
}

// MagIn applies the In predicate on the "mag" field.
func MagIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldMag, vs...))
}

// MagNotIn applies the NotIn predicate on the "mag" field.
func MagNotIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldMag, vs...))
}

// MagGT applies the GT predicate on the "mag" field.
func MagGT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldMag, v))
}

// MagGTE applies the GTE predicate on the "mag" field.
func MagGTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldMag, v))
}

// MagLT applies the LT predicate on the "mag" field.
func MagLT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldMag, v))
}

// MagLTE applies the LTE predicate on the "mag" field.
func MagLTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldMag, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldTime, v))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldUpdatedTime, v))
}

// UpdatedTimeIsNil applies the IsNil predicate on the "updated_time" field.
func UpdatedTimeIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldUpdatedTime))
}

// UpdatedTimeNotNil applies the NotNil predicate on the "updated_time" field.
func UpdatedTimeNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldUpdatedTime))
}

// TzEQ applies the EQ predicate on the "tz" field.
func TzEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldTz, v))
}

// TzNEQ applies the NEQ predicate on the "tz" field.
func TzNEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldTz, v))
}

// TzIn applies the In predicate on the "tz" field.
func TzIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldTz, vs...))
}

// TzNotIn applies the NotIn predicate on the "tz" field.
func TzNotIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldTz, vs...))
}

// TzGT applies the GT predicate on the "tz" field.
func TzGT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldTz, v))
}

// TzGTE applies the GTE predicate on the "tz" field.
func TzGTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldTz, v))
}

// TzLT applies the LT predicate on the "tz" field.
func TzLT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldTz, v))
}

// TzLTE applies the LTE predicate on the "tz" field.
func TzLTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldTz, v))
}

// TzIsNil applies the IsNil predicate on the "tz" field.
func TzIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldTz))
}

// TzNotNil applies the NotNil predicate on the "tz" field.
func TzNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldTz))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldURL, v))
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDetail, v))
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldDetail, v))
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldDetail, vs...))
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldDetail, vs...))
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldDetail, v))
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldDetail, v))
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldDetail, v))
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldDetail, v))
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldDetail, v))
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldDetail, v))
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldDetail, v))
}

// DetailIsNil applies the IsNil predicate on the "detail" field.
func DetailIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldDetail))
}

// DetailNotNil applies the NotNil predicate on the "detail" field.
func DetailNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldDetail))
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldDetail, v))
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldDetail, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldStatus, v))
}

// TsunamiEQ applies the EQ predicate on the "tsunami" field.
func TsunamiEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldTsunami, v))
}

// TsunamiNEQ applies the NEQ predicate on the "tsunami" field.
func TsunamiNEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldTsunami, v))
}

// TsunamiIn applies the In predicate on the "tsunami" field.
func TsunamiIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldTsunami, vs...))
}

// TsunamiNotIn applies the NotIn predicate on the "tsunami" field.
func TsunamiNotIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldTsunami, vs...))
}

// TsunamiGT applies the GT predicate on the "tsunami" field.
func TsunamiGT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldTsunami, v))
}

// TsunamiGTE applies the GTE predicate on the "tsunami" field.
func TsunamiGTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldTsunami, v))
}

// TsunamiLT applies the LT predicate on the "tsunami" field.
func TsunamiLT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldTsunami, v))
}

// TsunamiLTE applies the LTE predicate on the "tsunami" field.
func TsunamiLTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldTsunami, v))
}

// TsunamiIsNil applies the IsNil predicate on the "tsunami" field.
func TsunamiIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldTsunami))
}

// TsunamiNotNil applies the NotNil predicate on the "tsunami" field.
func TsunamiNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldTsunami))
}

// SigEQ applies the EQ predicate on the "sig" field.
func SigEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldSig, v))
}

// SigNEQ applies the NEQ predicate on the "sig" field.
func SigNEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldSig, v))
}

// SigIn applies the In predicate on the "sig" field.
func SigIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldSig, vs...))
}

// SigNotIn applies the NotIn predicate on the "sig" field.
func SigNotIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldSig, vs...))
}

// SigGT applies the GT predicate on the "sig" field.
func SigGT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldSig, v))
}

// SigGTE applies the GTE predicate on the "sig" field.
func SigGTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldSig, v))
}

// SigLT applies the LT predicate on the "sig" field.
func SigLT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldSig, v))
}

// SigLTE applies the LTE predicate on the "sig" field.
func SigLTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldSig, v))
}

// SigIsNil applies the IsNil predicate on the "sig" field.
func SigIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldSig))
}

// SigNotNil applies the NotNil predicate on the "sig" field.
func SigNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldSig))
}

// NetEQ applies the EQ predicate on the "net" field.
func NetEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldNet, v))
}

// NetNEQ applies the NEQ predicate on the "net" field.
func NetNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldNet, v))
}

// NetIn applies the In predicate on the "net" field.
func NetIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldNet, vs...))
}

// NetNotIn applies the NotIn predicate on the "net" field.
func NetNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldNet, vs...))
}

// NetGT applies the GT predicate on the "net" field.
func NetGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldNet, v))
}

// NetGTE applies the GTE predicate on the "net" field.
func NetGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldNet, v))
}

// NetLT applies the LT predicate on the "net" field.
func NetLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldNet, v))
}

// NetLTE applies the LTE predicate on the "net" field.
func NetLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldNet, v))
}

// NetContains applies the Contains predicate on the "net" field.
func NetContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldNet, v))
}

// NetHasPrefix applies the HasPrefix predicate on the "net" field.
func NetHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldNet, v))
}

// NetHasSuffix applies the HasSuffix predicate on the "net" field.
func NetHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldNet, v))
}

// NetIsNil applies the IsNil predicate on the "net" field.
func NetIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldNet))
}

// NetNotNil applies the NotNil predicate on the "net" field.
func NetNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldNet))
}

// NetEqualFold applies the EqualFold predicate on the "net" field.
func NetEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldNet, v))
}

// NetContainsFold applies the ContainsFold predicate on the "net" field.
func NetContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldNet, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldCode, v))
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldCode))
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldCode))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldCode, v))
}

// NstEQ applies the EQ predicate on the "nst" field.
func NstEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldNst, v))
}

// NstNEQ applies the NEQ predicate on the "nst" field.
func NstNEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldNst, v))
}

// NstIn applies the In predicate on the "nst" field.
func NstIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldNst, vs...))
}

// NstNotIn applies the NotIn predicate on the "nst" field.
func NstNotIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldNst, vs...))
}

// NstGT applies the GT predicate on the "nst" field.
func NstGT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldNst, v))
}

// NstGTE applies the GTE predicate on the "nst" field.
func NstGTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldNst, v))
}

// NstLT applies the LT predicate on the "nst" field.
func NstLT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldNst, v))
}

// NstLTE applies the LTE predicate on the "nst" field.
func NstLTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldNst, v))
}

// NstIsNil applies the IsNil predicate on the "nst" field.
func NstIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldNst))
}

// NstNotNil applies the NotNil predicate on the "nst" field.
func NstNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldNst))
}

// DminEQ applies the EQ predicate on the "dmin" field.
func DminEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDmin, v))
}

// DminNEQ applies the NEQ predicate on the "dmin" field.
func DminNEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldDmin, v))
}

// DminIn applies the In predicate on the "dmin" field.
func DminIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldDmin, vs...))
}

// DminNotIn applies the NotIn predicate on the "dmin" field.
func DminNotIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldDmin, vs...))
}

// DminGT applies the GT predicate on the "dmin" field.
func DminGT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldDmin, v))
}

// DminGTE applies the GTE predicate on the "dmin" field.
func DminGTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldDmin, v))
}

// DminLT applies the LT predicate on the "dmin" field.
func DminLT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldDmin, v))
}

// DminLTE applies the LTE predicate on the "dmin" field.
func DminLTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldDmin, v))
}

// DminIsNil applies the IsNil predicate on the "dmin" field.
func DminIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldDmin))
}

// DminNotNil applies the NotNil predicate on the "dmin" field.
func DminNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldDmin))
}

// RmsEQ applies the EQ predicate on the "rms" field.
func RmsEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldRms, v))
}

// RmsNEQ applies the NEQ predicate on the "rms" field.
func RmsNEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldRms, v))
}

// RmsIn applies the In predicate on the "rms" field.
func RmsIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldRms, vs...))
}

// RmsNotIn applies the NotIn predicate on the "rms" field.
func RmsNotIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldRms, vs...))
}

// RmsGT applies the GT predicate on the "rms" field.
func RmsGT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldRms, v))
}

// RmsGTE applies the GTE predicate on the "rms" field.
func RmsGTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldRms, v))
}

// RmsLT applies the LT predicate on the "rms" field.
func RmsLT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldRms, v))
}

// RmsLTE applies the LTE predicate on the "rms" field.
func RmsLTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldRms, v))
}

// RmsIsNil applies the IsNil predicate on the "rms" field.
func RmsIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldRms))
}

// RmsNotNil applies the NotNil predicate on the "rms" field.
func RmsNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldRms))
}

// GapEQ applies the EQ predicate on the "gap" field.
func GapEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldGap, v))
}

// GapNEQ applies the NEQ predicate on the "gap" field.
func GapNEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldGap, v))
}

// GapIn applies the In predicate on the "gap" field.
func GapIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldGap, vs...))
}

// GapNotIn applies the NotIn predicate on the "gap" field.
func GapNotIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldGap, vs...))
}

// GapGT applies the GT predicate on the "gap" field.
func GapGT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldGap, v))
}

// GapGTE applies the GTE predicate on the "gap" field.
func GapGTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldGap, v))
}

// GapLT applies the LT predicate on the "gap" field.
func GapLT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldGap, v))
}

// GapLTE applies the LTE predicate on the "gap" field.
func GapLTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldGap, v))
}

// GapIsNil applies the IsNil predicate on the "gap" field.
func GapIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldGap))
}

// GapNotNil applies the NotNil predicate on the "gap" field.
func GapNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldGap))
}

// MagTypeEQ applies the EQ predicate on the "mag_type" field.
func MagTypeEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldMagType, v))
}

// MagTypeNEQ applies the NEQ predicate on the "mag_type" field.
func MagTypeNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldMagType, v))
}

// MagTypeIn applies the In predicate on the "mag_type" field.
func MagTypeIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldMagType, vs...))
}

// MagTypeNotIn applies the NotIn predicate on the "mag_type" field.
func MagTypeNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldMagType, vs...))
}

// MagTypeGT applies the GT predicate on the "mag_type" field.
func MagTypeGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldMagType, v))
}

// MagTypeGTE applies the GTE predicate on the "mag_type" field.
func MagTypeGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldMagType, v))
}

// MagTypeLT applies the LT predicate on the "mag_type" field.
func MagTypeLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldMagType, v))
}

// MagTypeLTE applies the LTE predicate on the "mag_type" field.
func MagTypeLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldMagType, v))
}

// MagTypeContains applies the Contains predicate on the "mag_type" field.
func MagTypeContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldMagType, v))
}

// MagTypeHasPrefix applies the HasPrefix predicate on the "mag_type" field.
func MagTypeHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldMagType, v))
}

// MagTypeHasSuffix applies the HasSuffix predicate on the "mag_type" field.
func MagTypeHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldMagType, v))
}

// MagTypeIsNil applies the IsNil predicate on the "mag_type" field.
func MagTypeIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldMagType))
}

// MagTypeNotNil applies the NotNil predicate on the "mag_type" field.
func MagTypeNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldMagType))
}

// MagTypeEqualFold applies the EqualFold predicate on the "mag_type" field.
func MagTypeEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldMagType, v))
}

// MagTypeContainsFold applies the ContainsFold predicate on the "mag_type" field.
func MagTypeContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldMagType, v))
}

// EqTypeEQ applies the EQ predicate on the "eq_type" field.
func EqTypeEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldEqType, v))
}

// EqTypeNEQ applies the NEQ predicate on the "eq_type" field.
func EqTypeNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldEqType, v))
}

// EqTypeIn applies the In predicate on the "eq_type" field.
func EqTypeIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldEqType, vs...))
}

// EqTypeNotIn applies the NotIn predicate on the "eq_type" field.
func EqTypeNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldEqType, vs...))
}

// EqTypeGT applies the GT predicate on the "eq_type" field.
func EqTypeGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldEqType, v))
}

// EqTypeGTE applies the GTE predicate on the "eq_type" field.
func EqTypeGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldEqType, v))
}

// EqTypeLT applies the LT predicate on the "eq_type" field.
func EqTypeLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldEqType, v))
}

// EqTypeLTE applies the LTE predicate on the "eq_type" field.
func EqTypeLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldEqType, v))
}

// EqTypeContains applies the Contains predicate on the "eq_type" field.
func EqTypeContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldEqType, v))
}

// EqTypeHasPrefix applies the HasPrefix predicate on the "eq_type" field.
func EqTypeHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldEqType, v))
}

// EqTypeHasSuffix applies the HasSuffix predicate on the "eq_type" field.
func EqTypeHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldEqType, v))
}

// EqTypeIsNil applies the IsNil predicate on the "eq_type" field.
func EqTypeIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldEqType))
}

// EqTypeNotNil applies the NotNil predicate on the "eq_type" field.
func EqTypeNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldEqType))
}

// EqTypeEqualFold applies the EqualFold predicate on the "eq_type" field.
func EqTypeEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldEqType, v))
}

// EqTypeContainsFold applies the ContainsFold predicate on the "eq_type" field.
func EqTypeContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldEqType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldDeletedAt))
}

// HasGeometry applies the HasEdge predicate on the "geometry" edge.
func HasGeometry() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GeometryTable, GeometryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGeometryWith applies the HasEdge predicate on the "geometry" edge with a given conditions (other predicates).
func HasGeometryWith(preds ...predicate.Geometry) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newGeometryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReport applies the HasEdge predicate on the "report" edge.
func HasReport() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReportTable, ReportColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportWith applies the HasEdge predicate on the "report" edge with a given conditions (other predicates).
func HasReportWith(preds ...predicate.Report) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newReportStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFtypeEarthquakes applies the HasEdge predicate on the "ftype_earthquakes" edge.
func HasFtypeEarthquakes() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FtypeEarthquakesTable, FtypeEarthquakesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFtypeEarthquakesWith applies the HasEdge predicate on the "ftype_earthquakes" edge with a given conditions (other predicates).
func HasFtypeEarthquakesWith(preds ...predicate.FtypeEarthquake) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newFtypeEarthquakesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSourceEarthquakes applies the HasEdge predicate on the "source_earthquakes" edge.
func HasSourceEarthquakes() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SourceEarthquakesTable, SourceEarthquakesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceEarthquakesWith applies the HasEdge predicate on the "source_earthquakes" edge with a given conditions (other predicates).
func HasSourceEarthquakesWith(preds ...predicate.SourceEarthquake) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newSourceEarthquakesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Earthquake) predicate.Earthquake {
	return predicate.Earthquake(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Earthquake) predicate.Earthquake {
	return predicate.Earthquake(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Earthquake) predicate.Earthquake {
	return predicate.Earthquake(sql.NotPredicates(p))
}
