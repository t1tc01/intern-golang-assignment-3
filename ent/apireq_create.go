// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/hedwig-phan/assignment-3/ent/apireq"
)

// ApireqCreate is the builder for creating a Apireq entity.
type ApireqCreate struct {
	config
	mutation *ApireqMutation
	hooks    []Hook
}

// SetReqTime sets the "req_time" field.
func (ac *ApireqCreate) SetReqTime(t time.Time) *ApireqCreate {
	ac.mutation.SetReqTime(t)
	return ac
}

// SetReqParam sets the "req_param" field.
func (ac *ApireqCreate) SetReqParam(m map[string]interface{}) *ApireqCreate {
	ac.mutation.SetReqParam(m)
	return ac
}

// SetReqBody sets the "req_body" field.
func (ac *ApireqCreate) SetReqBody(m map[string]interface{}) *ApireqCreate {
	ac.mutation.SetReqBody(m)
	return ac
}

// SetReqHeaders sets the "req_headers" field.
func (ac *ApireqCreate) SetReqHeaders(m map[string]interface{}) *ApireqCreate {
	ac.mutation.SetReqHeaders(m)
	return ac
}

// SetReqMetadata sets the "req_metadata" field.
func (ac *ApireqCreate) SetReqMetadata(m map[string]interface{}) *ApireqCreate {
	ac.mutation.SetReqMetadata(m)
	return ac
}

// SetRespTime sets the "resp_time" field.
func (ac *ApireqCreate) SetRespTime(t time.Time) *ApireqCreate {
	ac.mutation.SetRespTime(t)
	return ac
}

// SetRespStatus sets the "resp_status" field.
func (ac *ApireqCreate) SetRespStatus(i int) *ApireqCreate {
	ac.mutation.SetRespStatus(i)
	return ac
}

// SetNillableRespStatus sets the "resp_status" field if the given value is not nil.
func (ac *ApireqCreate) SetNillableRespStatus(i *int) *ApireqCreate {
	if i != nil {
		ac.SetRespStatus(*i)
	}
	return ac
}

// SetRespBody sets the "resp_body" field.
func (ac *ApireqCreate) SetRespBody(m map[string]interface{}) *ApireqCreate {
	ac.mutation.SetRespBody(m)
	return ac
}

// SetRespHeaders sets the "resp_headers" field.
func (ac *ApireqCreate) SetRespHeaders(m map[string]interface{}) *ApireqCreate {
	ac.mutation.SetRespHeaders(m)
	return ac
}

// SetRespMetadata sets the "resp_metadata" field.
func (ac *ApireqCreate) SetRespMetadata(m map[string]interface{}) *ApireqCreate {
	ac.mutation.SetRespMetadata(m)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *ApireqCreate) SetCreatedAt(t time.Time) *ApireqCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *ApireqCreate) SetUpdatedAt(t time.Time) *ApireqCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *ApireqCreate) SetDeletedAt(t time.Time) *ApireqCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *ApireqCreate) SetNillableDeletedAt(t *time.Time) *ApireqCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *ApireqCreate) SetID(i int) *ApireqCreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the ApireqMutation object of the builder.
func (ac *ApireqCreate) Mutation() *ApireqMutation {
	return ac.mutation
}

// Save creates the Apireq in the database.
func (ac *ApireqCreate) Save(ctx context.Context) (*Apireq, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ApireqCreate) SaveX(ctx context.Context) *Apireq {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ApireqCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ApireqCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ApireqCreate) check() error {
	if _, ok := ac.mutation.ReqTime(); !ok {
		return &ValidationError{Name: "req_time", err: errors.New(`ent: missing required field "Apireq.req_time"`)}
	}
	if _, ok := ac.mutation.RespTime(); !ok {
		return &ValidationError{Name: "resp_time", err: errors.New(`ent: missing required field "Apireq.resp_time"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Apireq.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Apireq.updated_at"`)}
	}
	return nil
}

func (ac *ApireqCreate) sqlSave(ctx context.Context) (*Apireq, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ApireqCreate) createSpec() (*Apireq, *sqlgraph.CreateSpec) {
	var (
		_node = &Apireq{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(apireq.Table, sqlgraph.NewFieldSpec(apireq.FieldID, field.TypeInt))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.ReqTime(); ok {
		_spec.SetField(apireq.FieldReqTime, field.TypeTime, value)
		_node.ReqTime = value
	}
	if value, ok := ac.mutation.ReqParam(); ok {
		_spec.SetField(apireq.FieldReqParam, field.TypeJSON, value)
		_node.ReqParam = value
	}
	if value, ok := ac.mutation.ReqBody(); ok {
		_spec.SetField(apireq.FieldReqBody, field.TypeJSON, value)
		_node.ReqBody = value
	}
	if value, ok := ac.mutation.ReqHeaders(); ok {
		_spec.SetField(apireq.FieldReqHeaders, field.TypeJSON, value)
		_node.ReqHeaders = value
	}
	if value, ok := ac.mutation.ReqMetadata(); ok {
		_spec.SetField(apireq.FieldReqMetadata, field.TypeJSON, value)
		_node.ReqMetadata = value
	}
	if value, ok := ac.mutation.RespTime(); ok {
		_spec.SetField(apireq.FieldRespTime, field.TypeTime, value)
		_node.RespTime = value
	}
	if value, ok := ac.mutation.RespStatus(); ok {
		_spec.SetField(apireq.FieldRespStatus, field.TypeInt, value)
		_node.RespStatus = value
	}
	if value, ok := ac.mutation.RespBody(); ok {
		_spec.SetField(apireq.FieldRespBody, field.TypeJSON, value)
		_node.RespBody = value
	}
	if value, ok := ac.mutation.RespHeaders(); ok {
		_spec.SetField(apireq.FieldRespHeaders, field.TypeJSON, value)
		_node.RespHeaders = value
	}
	if value, ok := ac.mutation.RespMetadata(); ok {
		_spec.SetField(apireq.FieldRespMetadata, field.TypeJSON, value)
		_node.RespMetadata = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(apireq.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(apireq.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(apireq.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	return _node, _spec
}

// ApireqCreateBulk is the builder for creating many Apireq entities in bulk.
type ApireqCreateBulk struct {
	config
	err      error
	builders []*ApireqCreate
}

// Save creates the Apireq entities in the database.
func (acb *ApireqCreateBulk) Save(ctx context.Context) ([]*Apireq, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Apireq, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApireqMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ApireqCreateBulk) SaveX(ctx context.Context) []*Apireq {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ApireqCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ApireqCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
