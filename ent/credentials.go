// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.com/hedwig-phan/assignment-3/ent/credentials"
	"gitlab.com/hedwig-phan/assignment-3/ent/user"
)

// Credentials is the model entity for the Credentials schema.
type Credentials struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// HashedPassword holds the value of the "hashed_password" field.
	HashedPassword string `json:"hashed_password,omitempty"`
	// LastLogin holds the value of the "last_login" field.
	LastLogin time.Time `json:"last_login,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CredentialsQuery when eager-loading is set.
	Edges        CredentialsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CredentialsEdges holds the relations/edges for other nodes in the graph.
type CredentialsEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CredentialsEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Credentials) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case credentials.FieldID, credentials.FieldUserID:
			values[i] = new(sql.NullInt64)
		case credentials.FieldHashedPassword:
			values[i] = new(sql.NullString)
		case credentials.FieldLastLogin:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Credentials fields.
func (c *Credentials) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case credentials.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case credentials.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = int(value.Int64)
			}
		case credentials.FieldHashedPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_password", values[i])
			} else if value.Valid {
				c.HashedPassword = value.String
			}
		case credentials.FieldLastLogin:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login", values[i])
			} else if value.Valid {
				c.LastLogin = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Credentials.
// This includes values selected through modifiers, order, etc.
func (c *Credentials) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Credentials entity.
func (c *Credentials) QueryUser() *UserQuery {
	return NewCredentialsClient(c.config).QueryUser(c)
}

// Update returns a builder for updating this Credentials.
// Note that you need to call Credentials.Unwrap() before calling this method if this Credentials
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Credentials) Update() *CredentialsUpdateOne {
	return NewCredentialsClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Credentials entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Credentials) Unwrap() *Credentials {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Credentials is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Credentials) String() string {
	var builder strings.Builder
	builder.WriteString("Credentials(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteString(", ")
	builder.WriteString("hashed_password=")
	builder.WriteString(c.HashedPassword)
	builder.WriteString(", ")
	builder.WriteString("last_login=")
	builder.WriteString(c.LastLogin.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CredentialsSlice is a parsable slice of Credentials.
type CredentialsSlice []*Credentials
