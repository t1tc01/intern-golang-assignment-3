// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/hedwig-phan/assignment-3/ent/earthquake"
	"gitlab.com/hedwig-phan/assignment-3/ent/geometry"
	"gitlab.com/hedwig-phan/assignment-3/ent/location"
	"gitlab.com/hedwig-phan/assignment-3/ent/predicate"
)

// GeometryUpdate is the builder for updating Geometry entities.
type GeometryUpdate struct {
	config
	hooks    []Hook
	mutation *GeometryMutation
}

// Where appends a list predicates to the GeometryUpdate builder.
func (gu *GeometryUpdate) Where(ps ...predicate.Geometry) *GeometryUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetLocationID sets the "location_id" field.
func (gu *GeometryUpdate) SetLocationID(i int) *GeometryUpdate {
	gu.mutation.SetLocationID(i)
	return gu
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (gu *GeometryUpdate) SetNillableLocationID(i *int) *GeometryUpdate {
	if i != nil {
		gu.SetLocationID(*i)
	}
	return gu
}

// ClearLocationID clears the value of the "location_id" field.
func (gu *GeometryUpdate) ClearLocationID() *GeometryUpdate {
	gu.mutation.ClearLocationID()
	return gu
}

// SetLongitude sets the "longitude" field.
func (gu *GeometryUpdate) SetLongitude(f float64) *GeometryUpdate {
	gu.mutation.ResetLongitude()
	gu.mutation.SetLongitude(f)
	return gu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (gu *GeometryUpdate) SetNillableLongitude(f *float64) *GeometryUpdate {
	if f != nil {
		gu.SetLongitude(*f)
	}
	return gu
}

// AddLongitude adds f to the "longitude" field.
func (gu *GeometryUpdate) AddLongitude(f float64) *GeometryUpdate {
	gu.mutation.AddLongitude(f)
	return gu
}

// SetLatitude sets the "latitude" field.
func (gu *GeometryUpdate) SetLatitude(f float64) *GeometryUpdate {
	gu.mutation.ResetLatitude()
	gu.mutation.SetLatitude(f)
	return gu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (gu *GeometryUpdate) SetNillableLatitude(f *float64) *GeometryUpdate {
	if f != nil {
		gu.SetLatitude(*f)
	}
	return gu
}

// AddLatitude adds f to the "latitude" field.
func (gu *GeometryUpdate) AddLatitude(f float64) *GeometryUpdate {
	gu.mutation.AddLatitude(f)
	return gu
}

// SetDepth sets the "depth" field.
func (gu *GeometryUpdate) SetDepth(f float64) *GeometryUpdate {
	gu.mutation.ResetDepth()
	gu.mutation.SetDepth(f)
	return gu
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (gu *GeometryUpdate) SetNillableDepth(f *float64) *GeometryUpdate {
	if f != nil {
		gu.SetDepth(*f)
	}
	return gu
}

// AddDepth adds f to the "depth" field.
func (gu *GeometryUpdate) AddDepth(f float64) *GeometryUpdate {
	gu.mutation.AddDepth(f)
	return gu
}

// SetCreatedAt sets the "created_at" field.
func (gu *GeometryUpdate) SetCreatedAt(t time.Time) *GeometryUpdate {
	gu.mutation.SetCreatedAt(t)
	return gu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gu *GeometryUpdate) SetNillableCreatedAt(t *time.Time) *GeometryUpdate {
	if t != nil {
		gu.SetCreatedAt(*t)
	}
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GeometryUpdate) SetUpdatedAt(t time.Time) *GeometryUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gu *GeometryUpdate) SetNillableUpdatedAt(t *time.Time) *GeometryUpdate {
	if t != nil {
		gu.SetUpdatedAt(*t)
	}
	return gu
}

// SetDeletedAt sets the "deleted_at" field.
func (gu *GeometryUpdate) SetDeletedAt(t time.Time) *GeometryUpdate {
	gu.mutation.SetDeletedAt(t)
	return gu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gu *GeometryUpdate) SetNillableDeletedAt(t *time.Time) *GeometryUpdate {
	if t != nil {
		gu.SetDeletedAt(*t)
	}
	return gu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gu *GeometryUpdate) ClearDeletedAt() *GeometryUpdate {
	gu.mutation.ClearDeletedAt()
	return gu
}

// AddEarthquakeIDs adds the "earthquakes" edge to the Earthquake entity by IDs.
func (gu *GeometryUpdate) AddEarthquakeIDs(ids ...int) *GeometryUpdate {
	gu.mutation.AddEarthquakeIDs(ids...)
	return gu
}

// AddEarthquakes adds the "earthquakes" edges to the Earthquake entity.
func (gu *GeometryUpdate) AddEarthquakes(e ...*Earthquake) *GeometryUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return gu.AddEarthquakeIDs(ids...)
}

// SetLocation sets the "location" edge to the Location entity.
func (gu *GeometryUpdate) SetLocation(l *Location) *GeometryUpdate {
	return gu.SetLocationID(l.ID)
}

// Mutation returns the GeometryMutation object of the builder.
func (gu *GeometryUpdate) Mutation() *GeometryMutation {
	return gu.mutation
}

// ClearEarthquakes clears all "earthquakes" edges to the Earthquake entity.
func (gu *GeometryUpdate) ClearEarthquakes() *GeometryUpdate {
	gu.mutation.ClearEarthquakes()
	return gu
}

// RemoveEarthquakeIDs removes the "earthquakes" edge to Earthquake entities by IDs.
func (gu *GeometryUpdate) RemoveEarthquakeIDs(ids ...int) *GeometryUpdate {
	gu.mutation.RemoveEarthquakeIDs(ids...)
	return gu
}

// RemoveEarthquakes removes "earthquakes" edges to Earthquake entities.
func (gu *GeometryUpdate) RemoveEarthquakes(e ...*Earthquake) *GeometryUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return gu.RemoveEarthquakeIDs(ids...)
}

// ClearLocation clears the "location" edge to the Location entity.
func (gu *GeometryUpdate) ClearLocation() *GeometryUpdate {
	gu.mutation.ClearLocation()
	return gu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GeometryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GeometryUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GeometryUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GeometryUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GeometryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(geometry.Table, geometry.Columns, sqlgraph.NewFieldSpec(geometry.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Longitude(); ok {
		_spec.SetField(geometry.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := gu.mutation.AddedLongitude(); ok {
		_spec.AddField(geometry.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := gu.mutation.Latitude(); ok {
		_spec.SetField(geometry.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := gu.mutation.AddedLatitude(); ok {
		_spec.AddField(geometry.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := gu.mutation.Depth(); ok {
		_spec.SetField(geometry.FieldDepth, field.TypeFloat64, value)
	}
	if value, ok := gu.mutation.AddedDepth(); ok {
		_spec.AddField(geometry.FieldDepth, field.TypeFloat64, value)
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.SetField(geometry.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(geometry.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.DeletedAt(); ok {
		_spec.SetField(geometry.FieldDeletedAt, field.TypeTime, value)
	}
	if gu.mutation.DeletedAtCleared() {
		_spec.ClearField(geometry.FieldDeletedAt, field.TypeTime)
	}
	if gu.mutation.EarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   geometry.EarthquakesTable,
			Columns: []string{geometry.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedEarthquakesIDs(); len(nodes) > 0 && !gu.mutation.EarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   geometry.EarthquakesTable,
			Columns: []string{geometry.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.EarthquakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   geometry.EarthquakesTable,
			Columns: []string{geometry.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   geometry.LocationTable,
			Columns: []string{geometry.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   geometry.LocationTable,
			Columns: []string{geometry.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{geometry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GeometryUpdateOne is the builder for updating a single Geometry entity.
type GeometryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GeometryMutation
}

// SetLocationID sets the "location_id" field.
func (guo *GeometryUpdateOne) SetLocationID(i int) *GeometryUpdateOne {
	guo.mutation.SetLocationID(i)
	return guo
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (guo *GeometryUpdateOne) SetNillableLocationID(i *int) *GeometryUpdateOne {
	if i != nil {
		guo.SetLocationID(*i)
	}
	return guo
}

// ClearLocationID clears the value of the "location_id" field.
func (guo *GeometryUpdateOne) ClearLocationID() *GeometryUpdateOne {
	guo.mutation.ClearLocationID()
	return guo
}

// SetLongitude sets the "longitude" field.
func (guo *GeometryUpdateOne) SetLongitude(f float64) *GeometryUpdateOne {
	guo.mutation.ResetLongitude()
	guo.mutation.SetLongitude(f)
	return guo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (guo *GeometryUpdateOne) SetNillableLongitude(f *float64) *GeometryUpdateOne {
	if f != nil {
		guo.SetLongitude(*f)
	}
	return guo
}

// AddLongitude adds f to the "longitude" field.
func (guo *GeometryUpdateOne) AddLongitude(f float64) *GeometryUpdateOne {
	guo.mutation.AddLongitude(f)
	return guo
}

// SetLatitude sets the "latitude" field.
func (guo *GeometryUpdateOne) SetLatitude(f float64) *GeometryUpdateOne {
	guo.mutation.ResetLatitude()
	guo.mutation.SetLatitude(f)
	return guo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (guo *GeometryUpdateOne) SetNillableLatitude(f *float64) *GeometryUpdateOne {
	if f != nil {
		guo.SetLatitude(*f)
	}
	return guo
}

// AddLatitude adds f to the "latitude" field.
func (guo *GeometryUpdateOne) AddLatitude(f float64) *GeometryUpdateOne {
	guo.mutation.AddLatitude(f)
	return guo
}

// SetDepth sets the "depth" field.
func (guo *GeometryUpdateOne) SetDepth(f float64) *GeometryUpdateOne {
	guo.mutation.ResetDepth()
	guo.mutation.SetDepth(f)
	return guo
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (guo *GeometryUpdateOne) SetNillableDepth(f *float64) *GeometryUpdateOne {
	if f != nil {
		guo.SetDepth(*f)
	}
	return guo
}

// AddDepth adds f to the "depth" field.
func (guo *GeometryUpdateOne) AddDepth(f float64) *GeometryUpdateOne {
	guo.mutation.AddDepth(f)
	return guo
}

// SetCreatedAt sets the "created_at" field.
func (guo *GeometryUpdateOne) SetCreatedAt(t time.Time) *GeometryUpdateOne {
	guo.mutation.SetCreatedAt(t)
	return guo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guo *GeometryUpdateOne) SetNillableCreatedAt(t *time.Time) *GeometryUpdateOne {
	if t != nil {
		guo.SetCreatedAt(*t)
	}
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GeometryUpdateOne) SetUpdatedAt(t time.Time) *GeometryUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (guo *GeometryUpdateOne) SetNillableUpdatedAt(t *time.Time) *GeometryUpdateOne {
	if t != nil {
		guo.SetUpdatedAt(*t)
	}
	return guo
}

// SetDeletedAt sets the "deleted_at" field.
func (guo *GeometryUpdateOne) SetDeletedAt(t time.Time) *GeometryUpdateOne {
	guo.mutation.SetDeletedAt(t)
	return guo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guo *GeometryUpdateOne) SetNillableDeletedAt(t *time.Time) *GeometryUpdateOne {
	if t != nil {
		guo.SetDeletedAt(*t)
	}
	return guo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (guo *GeometryUpdateOne) ClearDeletedAt() *GeometryUpdateOne {
	guo.mutation.ClearDeletedAt()
	return guo
}

// AddEarthquakeIDs adds the "earthquakes" edge to the Earthquake entity by IDs.
func (guo *GeometryUpdateOne) AddEarthquakeIDs(ids ...int) *GeometryUpdateOne {
	guo.mutation.AddEarthquakeIDs(ids...)
	return guo
}

// AddEarthquakes adds the "earthquakes" edges to the Earthquake entity.
func (guo *GeometryUpdateOne) AddEarthquakes(e ...*Earthquake) *GeometryUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return guo.AddEarthquakeIDs(ids...)
}

// SetLocation sets the "location" edge to the Location entity.
func (guo *GeometryUpdateOne) SetLocation(l *Location) *GeometryUpdateOne {
	return guo.SetLocationID(l.ID)
}

// Mutation returns the GeometryMutation object of the builder.
func (guo *GeometryUpdateOne) Mutation() *GeometryMutation {
	return guo.mutation
}

// ClearEarthquakes clears all "earthquakes" edges to the Earthquake entity.
func (guo *GeometryUpdateOne) ClearEarthquakes() *GeometryUpdateOne {
	guo.mutation.ClearEarthquakes()
	return guo
}

// RemoveEarthquakeIDs removes the "earthquakes" edge to Earthquake entities by IDs.
func (guo *GeometryUpdateOne) RemoveEarthquakeIDs(ids ...int) *GeometryUpdateOne {
	guo.mutation.RemoveEarthquakeIDs(ids...)
	return guo
}

// RemoveEarthquakes removes "earthquakes" edges to Earthquake entities.
func (guo *GeometryUpdateOne) RemoveEarthquakes(e ...*Earthquake) *GeometryUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return guo.RemoveEarthquakeIDs(ids...)
}

// ClearLocation clears the "location" edge to the Location entity.
func (guo *GeometryUpdateOne) ClearLocation() *GeometryUpdateOne {
	guo.mutation.ClearLocation()
	return guo
}

// Where appends a list predicates to the GeometryUpdate builder.
func (guo *GeometryUpdateOne) Where(ps ...predicate.Geometry) *GeometryUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GeometryUpdateOne) Select(field string, fields ...string) *GeometryUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Geometry entity.
func (guo *GeometryUpdateOne) Save(ctx context.Context) (*Geometry, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GeometryUpdateOne) SaveX(ctx context.Context) *Geometry {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GeometryUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GeometryUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GeometryUpdateOne) sqlSave(ctx context.Context) (_node *Geometry, err error) {
	_spec := sqlgraph.NewUpdateSpec(geometry.Table, geometry.Columns, sqlgraph.NewFieldSpec(geometry.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Geometry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, geometry.FieldID)
		for _, f := range fields {
			if !geometry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != geometry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Longitude(); ok {
		_spec.SetField(geometry.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := guo.mutation.AddedLongitude(); ok {
		_spec.AddField(geometry.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := guo.mutation.Latitude(); ok {
		_spec.SetField(geometry.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := guo.mutation.AddedLatitude(); ok {
		_spec.AddField(geometry.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := guo.mutation.Depth(); ok {
		_spec.SetField(geometry.FieldDepth, field.TypeFloat64, value)
	}
	if value, ok := guo.mutation.AddedDepth(); ok {
		_spec.AddField(geometry.FieldDepth, field.TypeFloat64, value)
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.SetField(geometry.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(geometry.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.DeletedAt(); ok {
		_spec.SetField(geometry.FieldDeletedAt, field.TypeTime, value)
	}
	if guo.mutation.DeletedAtCleared() {
		_spec.ClearField(geometry.FieldDeletedAt, field.TypeTime)
	}
	if guo.mutation.EarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   geometry.EarthquakesTable,
			Columns: []string{geometry.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedEarthquakesIDs(); len(nodes) > 0 && !guo.mutation.EarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   geometry.EarthquakesTable,
			Columns: []string{geometry.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.EarthquakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   geometry.EarthquakesTable,
			Columns: []string{geometry.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   geometry.LocationTable,
			Columns: []string{geometry.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   geometry.LocationTable,
			Columns: []string{geometry.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Geometry{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{geometry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
