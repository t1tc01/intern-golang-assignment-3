// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.com/hedwig-phan/assignment-3/ent/earthquake"
	"gitlab.com/hedwig-phan/assignment-3/ent/source"
	"gitlab.com/hedwig-phan/assignment-3/ent/sourceearthquake"
)

// SourceEarthquake is the model entity for the SourceEarthquake schema.
type SourceEarthquake struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SID holds the value of the "s_id" field.
	SID int `json:"s_id,omitempty"`
	// EqID holds the value of the "eq_id" field.
	EqID int `json:"eq_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SourceEarthquakeQuery when eager-loading is set.
	Edges        SourceEarthquakeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SourceEarthquakeEdges holds the relations/edges for other nodes in the graph.
type SourceEarthquakeEdges struct {
	// Earthquake holds the value of the earthquake edge.
	Earthquake *Earthquake `json:"earthquake,omitempty"`
	// Source holds the value of the source edge.
	Source *Source `json:"source,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EarthquakeOrErr returns the Earthquake value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SourceEarthquakeEdges) EarthquakeOrErr() (*Earthquake, error) {
	if e.Earthquake != nil {
		return e.Earthquake, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: earthquake.Label}
	}
	return nil, &NotLoadedError{edge: "earthquake"}
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SourceEarthquakeEdges) SourceOrErr() (*Source, error) {
	if e.Source != nil {
		return e.Source, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: source.Label}
	}
	return nil, &NotLoadedError{edge: "source"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SourceEarthquake) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sourceearthquake.FieldID, sourceearthquake.FieldSID, sourceearthquake.FieldEqID:
			values[i] = new(sql.NullInt64)
		case sourceearthquake.FieldCreatedAt, sourceearthquake.FieldUpdatedAt, sourceearthquake.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SourceEarthquake fields.
func (se *SourceEarthquake) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sourceearthquake.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			se.ID = int(value.Int64)
		case sourceearthquake.FieldSID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field s_id", values[i])
			} else if value.Valid {
				se.SID = int(value.Int64)
			}
		case sourceearthquake.FieldEqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field eq_id", values[i])
			} else if value.Valid {
				se.EqID = int(value.Int64)
			}
		case sourceearthquake.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				se.CreatedAt = value.Time
			}
		case sourceearthquake.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				se.UpdatedAt = value.Time
			}
		case sourceearthquake.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				se.DeletedAt = value.Time
			}
		default:
			se.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SourceEarthquake.
// This includes values selected through modifiers, order, etc.
func (se *SourceEarthquake) Value(name string) (ent.Value, error) {
	return se.selectValues.Get(name)
}

// QueryEarthquake queries the "earthquake" edge of the SourceEarthquake entity.
func (se *SourceEarthquake) QueryEarthquake() *EarthquakeQuery {
	return NewSourceEarthquakeClient(se.config).QueryEarthquake(se)
}

// QuerySource queries the "source" edge of the SourceEarthquake entity.
func (se *SourceEarthquake) QuerySource() *SourceQuery {
	return NewSourceEarthquakeClient(se.config).QuerySource(se)
}

// Update returns a builder for updating this SourceEarthquake.
// Note that you need to call SourceEarthquake.Unwrap() before calling this method if this SourceEarthquake
// was returned from a transaction, and the transaction was committed or rolled back.
func (se *SourceEarthquake) Update() *SourceEarthquakeUpdateOne {
	return NewSourceEarthquakeClient(se.config).UpdateOne(se)
}

// Unwrap unwraps the SourceEarthquake entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (se *SourceEarthquake) Unwrap() *SourceEarthquake {
	_tx, ok := se.config.driver.(*txDriver)
	if !ok {
		panic("ent: SourceEarthquake is not a transactional entity")
	}
	se.config.driver = _tx.drv
	return se
}

// String implements the fmt.Stringer.
func (se *SourceEarthquake) String() string {
	var builder strings.Builder
	builder.WriteString("SourceEarthquake(")
	builder.WriteString(fmt.Sprintf("id=%v, ", se.ID))
	builder.WriteString("s_id=")
	builder.WriteString(fmt.Sprintf("%v", se.SID))
	builder.WriteString(", ")
	builder.WriteString("eq_id=")
	builder.WriteString(fmt.Sprintf("%v", se.EqID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(se.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(se.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(se.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SourceEarthquakes is a parsable slice of SourceEarthquake.
type SourceEarthquakes []*SourceEarthquake
