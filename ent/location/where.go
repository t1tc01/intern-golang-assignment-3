// Code generated by ent, DO NOT EDIT.

package location

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.com/hedwig-phan/assignment-3/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Location {
	return predicate.Location(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Location {
	return predicate.Location(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Location {
	return predicate.Location(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Location {
	return predicate.Location(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Location {
	return predicate.Location(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Location {
	return predicate.Location(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Location {
	return predicate.Location(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Location {
	return predicate.Location(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Location {
	return predicate.Location(sql.FieldLTE(FieldID, id))
}

// Place applies equality check predicate on the "place" field. It's identical to PlaceEQ.
func Place(v string) predicate.Location {
	return predicate.Location(sql.FieldEQ(FieldPlace, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Location {
	return predicate.Location(sql.FieldEQ(FieldAddress, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldEQ(FieldDeletedAt, v))
}

// PlaceEQ applies the EQ predicate on the "place" field.
func PlaceEQ(v string) predicate.Location {
	return predicate.Location(sql.FieldEQ(FieldPlace, v))
}

// PlaceNEQ applies the NEQ predicate on the "place" field.
func PlaceNEQ(v string) predicate.Location {
	return predicate.Location(sql.FieldNEQ(FieldPlace, v))
}

// PlaceIn applies the In predicate on the "place" field.
func PlaceIn(vs ...string) predicate.Location {
	return predicate.Location(sql.FieldIn(FieldPlace, vs...))
}

// PlaceNotIn applies the NotIn predicate on the "place" field.
func PlaceNotIn(vs ...string) predicate.Location {
	return predicate.Location(sql.FieldNotIn(FieldPlace, vs...))
}

// PlaceGT applies the GT predicate on the "place" field.
func PlaceGT(v string) predicate.Location {
	return predicate.Location(sql.FieldGT(FieldPlace, v))
}

// PlaceGTE applies the GTE predicate on the "place" field.
func PlaceGTE(v string) predicate.Location {
	return predicate.Location(sql.FieldGTE(FieldPlace, v))
}

// PlaceLT applies the LT predicate on the "place" field.
func PlaceLT(v string) predicate.Location {
	return predicate.Location(sql.FieldLT(FieldPlace, v))
}

// PlaceLTE applies the LTE predicate on the "place" field.
func PlaceLTE(v string) predicate.Location {
	return predicate.Location(sql.FieldLTE(FieldPlace, v))
}

// PlaceContains applies the Contains predicate on the "place" field.
func PlaceContains(v string) predicate.Location {
	return predicate.Location(sql.FieldContains(FieldPlace, v))
}

// PlaceHasPrefix applies the HasPrefix predicate on the "place" field.
func PlaceHasPrefix(v string) predicate.Location {
	return predicate.Location(sql.FieldHasPrefix(FieldPlace, v))
}

// PlaceHasSuffix applies the HasSuffix predicate on the "place" field.
func PlaceHasSuffix(v string) predicate.Location {
	return predicate.Location(sql.FieldHasSuffix(FieldPlace, v))
}

// PlaceIsNil applies the IsNil predicate on the "place" field.
func PlaceIsNil() predicate.Location {
	return predicate.Location(sql.FieldIsNull(FieldPlace))
}

// PlaceNotNil applies the NotNil predicate on the "place" field.
func PlaceNotNil() predicate.Location {
	return predicate.Location(sql.FieldNotNull(FieldPlace))
}

// PlaceEqualFold applies the EqualFold predicate on the "place" field.
func PlaceEqualFold(v string) predicate.Location {
	return predicate.Location(sql.FieldEqualFold(FieldPlace, v))
}

// PlaceContainsFold applies the ContainsFold predicate on the "place" field.
func PlaceContainsFold(v string) predicate.Location {
	return predicate.Location(sql.FieldContainsFold(FieldPlace, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Location {
	return predicate.Location(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Location {
	return predicate.Location(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Location {
	return predicate.Location(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Location {
	return predicate.Location(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Location {
	return predicate.Location(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Location {
	return predicate.Location(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Location {
	return predicate.Location(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Location {
	return predicate.Location(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Location {
	return predicate.Location(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Location {
	return predicate.Location(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Location {
	return predicate.Location(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Location {
	return predicate.Location(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Location {
	return predicate.Location(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Location {
	return predicate.Location(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Location {
	return predicate.Location(sql.FieldContainsFold(FieldAddress, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Location {
	return predicate.Location(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Location {
	return predicate.Location(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Location {
	return predicate.Location(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Location {
	return predicate.Location(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Location {
	return predicate.Location(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Location {
	return predicate.Location(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Location {
	return predicate.Location(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Location {
	return predicate.Location(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Location {
	return predicate.Location(sql.FieldNotNull(FieldDeletedAt))
}

// HasGeometries applies the HasEdge predicate on the "geometries" edge.
func HasGeometries() predicate.Location {
	return predicate.Location(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GeometriesTable, GeometriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGeometriesWith applies the HasEdge predicate on the "geometries" edge with a given conditions (other predicates).
func HasGeometriesWith(preds ...predicate.Geometry) predicate.Location {
	return predicate.Location(func(s *sql.Selector) {
		step := newGeometriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Location) predicate.Location {
	return predicate.Location(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Location) predicate.Location {
	return predicate.Location(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Location) predicate.Location {
	return predicate.Location(sql.NotPredicates(p))
}
