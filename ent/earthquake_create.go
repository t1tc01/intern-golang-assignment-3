// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/hedwig-phan/assignment-3/ent/earthquake"
	"gitlab.com/hedwig-phan/assignment-3/ent/ftypeearthquake"
	"gitlab.com/hedwig-phan/assignment-3/ent/geometry"
	"gitlab.com/hedwig-phan/assignment-3/ent/report"
	"gitlab.com/hedwig-phan/assignment-3/ent/sourceearthquake"
)

// EarthquakeCreate is the builder for creating a Earthquake entity.
type EarthquakeCreate struct {
	config
	mutation *EarthquakeMutation
	hooks    []Hook
}

// SetGeoID sets the "geo_id" field.
func (ec *EarthquakeCreate) SetGeoID(i int) *EarthquakeCreate {
	ec.mutation.SetGeoID(i)
	return ec
}

// SetNillableGeoID sets the "geo_id" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableGeoID(i *int) *EarthquakeCreate {
	if i != nil {
		ec.SetGeoID(*i)
	}
	return ec
}

// SetReportID sets the "report_id" field.
func (ec *EarthquakeCreate) SetReportID(i int) *EarthquakeCreate {
	ec.mutation.SetReportID(i)
	return ec
}

// SetNillableReportID sets the "report_id" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableReportID(i *int) *EarthquakeCreate {
	if i != nil {
		ec.SetReportID(*i)
	}
	return ec
}

// SetMag sets the "mag" field.
func (ec *EarthquakeCreate) SetMag(f float64) *EarthquakeCreate {
	ec.mutation.SetMag(f)
	return ec
}

// SetTime sets the "time" field.
func (ec *EarthquakeCreate) SetTime(t time.Time) *EarthquakeCreate {
	ec.mutation.SetTime(t)
	return ec
}

// SetUpdatedTime sets the "updated_time" field.
func (ec *EarthquakeCreate) SetUpdatedTime(t time.Time) *EarthquakeCreate {
	ec.mutation.SetUpdatedTime(t)
	return ec
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableUpdatedTime(t *time.Time) *EarthquakeCreate {
	if t != nil {
		ec.SetUpdatedTime(*t)
	}
	return ec
}

// SetTz sets the "tz" field.
func (ec *EarthquakeCreate) SetTz(i int32) *EarthquakeCreate {
	ec.mutation.SetTz(i)
	return ec
}

// SetNillableTz sets the "tz" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableTz(i *int32) *EarthquakeCreate {
	if i != nil {
		ec.SetTz(*i)
	}
	return ec
}

// SetURL sets the "url" field.
func (ec *EarthquakeCreate) SetURL(s string) *EarthquakeCreate {
	ec.mutation.SetURL(s)
	return ec
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableURL(s *string) *EarthquakeCreate {
	if s != nil {
		ec.SetURL(*s)
	}
	return ec
}

// SetDetail sets the "detail" field.
func (ec *EarthquakeCreate) SetDetail(s string) *EarthquakeCreate {
	ec.mutation.SetDetail(s)
	return ec
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableDetail(s *string) *EarthquakeCreate {
	if s != nil {
		ec.SetDetail(*s)
	}
	return ec
}

// SetStatus sets the "status" field.
func (ec *EarthquakeCreate) SetStatus(s string) *EarthquakeCreate {
	ec.mutation.SetStatus(s)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableStatus(s *string) *EarthquakeCreate {
	if s != nil {
		ec.SetStatus(*s)
	}
	return ec
}

// SetTsunami sets the "tsunami" field.
func (ec *EarthquakeCreate) SetTsunami(i int32) *EarthquakeCreate {
	ec.mutation.SetTsunami(i)
	return ec
}

// SetNillableTsunami sets the "tsunami" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableTsunami(i *int32) *EarthquakeCreate {
	if i != nil {
		ec.SetTsunami(*i)
	}
	return ec
}

// SetSig sets the "sig" field.
func (ec *EarthquakeCreate) SetSig(i int32) *EarthquakeCreate {
	ec.mutation.SetSig(i)
	return ec
}

// SetNillableSig sets the "sig" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableSig(i *int32) *EarthquakeCreate {
	if i != nil {
		ec.SetSig(*i)
	}
	return ec
}

// SetNet sets the "net" field.
func (ec *EarthquakeCreate) SetNet(s string) *EarthquakeCreate {
	ec.mutation.SetNet(s)
	return ec
}

// SetNillableNet sets the "net" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableNet(s *string) *EarthquakeCreate {
	if s != nil {
		ec.SetNet(*s)
	}
	return ec
}

// SetCode sets the "code" field.
func (ec *EarthquakeCreate) SetCode(s string) *EarthquakeCreate {
	ec.mutation.SetCode(s)
	return ec
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableCode(s *string) *EarthquakeCreate {
	if s != nil {
		ec.SetCode(*s)
	}
	return ec
}

// SetNst sets the "nst" field.
func (ec *EarthquakeCreate) SetNst(i int32) *EarthquakeCreate {
	ec.mutation.SetNst(i)
	return ec
}

// SetNillableNst sets the "nst" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableNst(i *int32) *EarthquakeCreate {
	if i != nil {
		ec.SetNst(*i)
	}
	return ec
}

// SetDmin sets the "dmin" field.
func (ec *EarthquakeCreate) SetDmin(f float64) *EarthquakeCreate {
	ec.mutation.SetDmin(f)
	return ec
}

// SetNillableDmin sets the "dmin" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableDmin(f *float64) *EarthquakeCreate {
	if f != nil {
		ec.SetDmin(*f)
	}
	return ec
}

// SetRms sets the "rms" field.
func (ec *EarthquakeCreate) SetRms(f float64) *EarthquakeCreate {
	ec.mutation.SetRms(f)
	return ec
}

// SetNillableRms sets the "rms" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableRms(f *float64) *EarthquakeCreate {
	if f != nil {
		ec.SetRms(*f)
	}
	return ec
}

// SetGap sets the "gap" field.
func (ec *EarthquakeCreate) SetGap(f float64) *EarthquakeCreate {
	ec.mutation.SetGap(f)
	return ec
}

// SetNillableGap sets the "gap" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableGap(f *float64) *EarthquakeCreate {
	if f != nil {
		ec.SetGap(*f)
	}
	return ec
}

// SetMagType sets the "mag_type" field.
func (ec *EarthquakeCreate) SetMagType(s string) *EarthquakeCreate {
	ec.mutation.SetMagType(s)
	return ec
}

// SetNillableMagType sets the "mag_type" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableMagType(s *string) *EarthquakeCreate {
	if s != nil {
		ec.SetMagType(*s)
	}
	return ec
}

// SetEqType sets the "eq_type" field.
func (ec *EarthquakeCreate) SetEqType(s string) *EarthquakeCreate {
	ec.mutation.SetEqType(s)
	return ec
}

// SetNillableEqType sets the "eq_type" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableEqType(s *string) *EarthquakeCreate {
	if s != nil {
		ec.SetEqType(*s)
	}
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EarthquakeCreate) SetCreatedAt(t time.Time) *EarthquakeCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EarthquakeCreate) SetUpdatedAt(t time.Time) *EarthquakeCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *EarthquakeCreate) SetDeletedAt(t time.Time) *EarthquakeCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableDeletedAt(t *time.Time) *EarthquakeCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetGeometryID sets the "geometry" edge to the Geometry entity by ID.
func (ec *EarthquakeCreate) SetGeometryID(id int) *EarthquakeCreate {
	ec.mutation.SetGeometryID(id)
	return ec
}

// SetNillableGeometryID sets the "geometry" edge to the Geometry entity by ID if the given value is not nil.
func (ec *EarthquakeCreate) SetNillableGeometryID(id *int) *EarthquakeCreate {
	if id != nil {
		ec = ec.SetGeometryID(*id)
	}
	return ec
}

// SetGeometry sets the "geometry" edge to the Geometry entity.
func (ec *EarthquakeCreate) SetGeometry(g *Geometry) *EarthquakeCreate {
	return ec.SetGeometryID(g.ID)
}

// SetReport sets the "report" edge to the Report entity.
func (ec *EarthquakeCreate) SetReport(r *Report) *EarthquakeCreate {
	return ec.SetReportID(r.ID)
}

// AddFtypeEarthquakeIDs adds the "ftype_earthquakes" edge to the FtypeEarthquake entity by IDs.
func (ec *EarthquakeCreate) AddFtypeEarthquakeIDs(ids ...int) *EarthquakeCreate {
	ec.mutation.AddFtypeEarthquakeIDs(ids...)
	return ec
}

// AddFtypeEarthquakes adds the "ftype_earthquakes" edges to the FtypeEarthquake entity.
func (ec *EarthquakeCreate) AddFtypeEarthquakes(f ...*FtypeEarthquake) *EarthquakeCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ec.AddFtypeEarthquakeIDs(ids...)
}

// AddSourceEarthquakeIDs adds the "source_earthquakes" edge to the SourceEarthquake entity by IDs.
func (ec *EarthquakeCreate) AddSourceEarthquakeIDs(ids ...int) *EarthquakeCreate {
	ec.mutation.AddSourceEarthquakeIDs(ids...)
	return ec
}

// AddSourceEarthquakes adds the "source_earthquakes" edges to the SourceEarthquake entity.
func (ec *EarthquakeCreate) AddSourceEarthquakes(s ...*SourceEarthquake) *EarthquakeCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ec.AddSourceEarthquakeIDs(ids...)
}

// Mutation returns the EarthquakeMutation object of the builder.
func (ec *EarthquakeCreate) Mutation() *EarthquakeMutation {
	return ec.mutation
}

// Save creates the Earthquake in the database.
func (ec *EarthquakeCreate) Save(ctx context.Context) (*Earthquake, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EarthquakeCreate) SaveX(ctx context.Context) *Earthquake {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EarthquakeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EarthquakeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EarthquakeCreate) check() error {
	if _, ok := ec.mutation.Mag(); !ok {
		return &ValidationError{Name: "mag", err: errors.New(`ent: missing required field "Earthquake.mag"`)}
	}
	if _, ok := ec.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "Earthquake.time"`)}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Earthquake.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Earthquake.updated_at"`)}
	}
	return nil
}

func (ec *EarthquakeCreate) sqlSave(ctx context.Context) (*Earthquake, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EarthquakeCreate) createSpec() (*Earthquake, *sqlgraph.CreateSpec) {
	var (
		_node = &Earthquake{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(earthquake.Table, sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt))
	)
	if value, ok := ec.mutation.Mag(); ok {
		_spec.SetField(earthquake.FieldMag, field.TypeFloat64, value)
		_node.Mag = value
	}
	if value, ok := ec.mutation.Time(); ok {
		_spec.SetField(earthquake.FieldTime, field.TypeTime, value)
		_node.Time = value
	}
	if value, ok := ec.mutation.UpdatedTime(); ok {
		_spec.SetField(earthquake.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = value
	}
	if value, ok := ec.mutation.Tz(); ok {
		_spec.SetField(earthquake.FieldTz, field.TypeInt32, value)
		_node.Tz = value
	}
	if value, ok := ec.mutation.URL(); ok {
		_spec.SetField(earthquake.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ec.mutation.Detail(); ok {
		_spec.SetField(earthquake.FieldDetail, field.TypeString, value)
		_node.Detail = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(earthquake.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.Tsunami(); ok {
		_spec.SetField(earthquake.FieldTsunami, field.TypeInt32, value)
		_node.Tsunami = value
	}
	if value, ok := ec.mutation.Sig(); ok {
		_spec.SetField(earthquake.FieldSig, field.TypeInt32, value)
		_node.Sig = value
	}
	if value, ok := ec.mutation.Net(); ok {
		_spec.SetField(earthquake.FieldNet, field.TypeString, value)
		_node.Net = value
	}
	if value, ok := ec.mutation.Code(); ok {
		_spec.SetField(earthquake.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := ec.mutation.Nst(); ok {
		_spec.SetField(earthquake.FieldNst, field.TypeInt32, value)
		_node.Nst = value
	}
	if value, ok := ec.mutation.Dmin(); ok {
		_spec.SetField(earthquake.FieldDmin, field.TypeFloat64, value)
		_node.Dmin = value
	}
	if value, ok := ec.mutation.Rms(); ok {
		_spec.SetField(earthquake.FieldRms, field.TypeFloat64, value)
		_node.Rms = value
	}
	if value, ok := ec.mutation.Gap(); ok {
		_spec.SetField(earthquake.FieldGap, field.TypeFloat64, value)
		_node.Gap = value
	}
	if value, ok := ec.mutation.MagType(); ok {
		_spec.SetField(earthquake.FieldMagType, field.TypeString, value)
		_node.MagType = value
	}
	if value, ok := ec.mutation.EqType(); ok {
		_spec.SetField(earthquake.FieldEqType, field.TypeString, value)
		_node.EqType = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(earthquake.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(earthquake.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(earthquake.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := ec.mutation.GeometryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earthquake.GeometryTable,
			Columns: []string{earthquake.GeometryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(geometry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GeoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   earthquake.ReportTable,
			Columns: []string{earthquake.ReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(report.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReportID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.FtypeEarthquakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   earthquake.FtypeEarthquakesTable,
			Columns: []string{earthquake.FtypeEarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ftypeearthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.SourceEarthquakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   earthquake.SourceEarthquakesTable,
			Columns: []string{earthquake.SourceEarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourceearthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EarthquakeCreateBulk is the builder for creating many Earthquake entities in bulk.
type EarthquakeCreateBulk struct {
	config
	err      error
	builders []*EarthquakeCreate
}

// Save creates the Earthquake entities in the database.
func (ecb *EarthquakeCreateBulk) Save(ctx context.Context) ([]*Earthquake, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Earthquake, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EarthquakeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EarthquakeCreateBulk) SaveX(ctx context.Context) []*Earthquake {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EarthquakeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EarthquakeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
